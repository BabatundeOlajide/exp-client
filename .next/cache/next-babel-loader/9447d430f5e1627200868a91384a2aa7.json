{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\n\nconst NewUserModal = ({\n  children,\n  pageProps,\n  addUserError,\n  addUser\n}) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm();\n\n  const onSubmit = formData => {\n    addUser(formData);\n  };\n\n  return __jsx(\"div\", {\n    id: \"myModal\",\n    className: \"modal\"\n  }, __jsx(\"div\", {\n    className: \"modal-content\"\n  }, __jsx(\"span\", {\n    className: \"close\",\n    \"data-type\": \"hide-modal\",\n    \"data-target\": \"myModal\"\n  }, \"\\xD7\"), __jsx(\"h3\", null, \"New User\"), __jsx(\"hr\", {\n    className: \"divider\"\n  }), addUserError && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \" \", error))), Object.keys(errors).length != 0 && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, errors.firstName && __jsx(\"li\", null, \" \", errors.firstName.message, \" \"), errors.lastName && __jsx(\"li\", null, \" \", errors.lastName.message, \" \"), errors.email && __jsx(\"li\", null, \" \", errors.email.message), errors.phoneNumber && __jsx(\"li\", null, \" \", errors.phoneNumber.message, \" \"))), __jsx(\"form\", {\n    className: \"pure-form pure-form-aligned\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"fieldset\", null, __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Firstname\"\n  }, \"Firstname\"), __jsx(\"input\", {\n    name: \"firstName\",\n    type: \"text\",\n    id: \"Firstname\",\n    placeholder: \"FirstName\",\n    ref: register({\n      required: \"FirstName is required\"\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Lastname\"\n  }, \"Lastname\"), __jsx(\"input\", {\n    name: \"lastName\",\n    type: \"text\",\n    id: \"Lastname\",\n    placeholder: \"LastName\",\n    ref: register({\n      required: \"LastName is required\"\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Email\"\n  }, \"Email Address\"), __jsx(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    id: \"Email\",\n    placeholder: \"Email Address\",\n    ref: register({\n      required: \"Email is required\",\n      pattern: {\n        value: pattern.EMAIL,\n        message: errorMessage.INVALID_EMAIL\n      }\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Phone\"\n  }, \"Phone Number\"), __jsx(\"input\", {\n    type: \"tel\",\n    name: \"phoneNumber\",\n    pattern: \"^(\\\\+1[0-9]{3}|[0-9]{3})[0-9]{3}[0-9]{4}$\",\n    id: \"Phone\",\n    placeholder: \"Phone number\",\n    ref: register({\n      required: \"Phone Number is required\",\n      pattern: {\n        value: pattern.PHONE,\n        message: errorMessage.INVALID_PHONE\n      }\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-controls\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"pure-button button-secondary\"\n  }, \"Submit\"))))));\n};\n\nconst mapStateToProps = state => ({\n  addUserError: state.users.addUserError\n});\n\nconst mapDispatchToProps = {\n  addUser: userActions.logout\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewUserModal);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/components/newUserModal.js"],"names":["Link","userActions","connect","useForm","pattern","errorMessage","NewUserModal","children","pageProps","addUserError","addUser","register","handleSubmit","reset","errors","onSubmit","formData","error","Object","keys","length","firstName","message","lastName","email","phoneNumber","required","value","EMAIL","INVALID_EMAIL","PHONE","INVALID_PHONE","mapStateToProps","state","users","mapDispatchToProps","logout"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\n\nconst NewUserModal = ({children, pageProps,addUserError, addUser}) => {\n    const {register, handleSubmit,reset, errors} = useForm();\n    const onSubmit = formData => {\n        addUser(formData);\n\n    }\n    return <div id=\"myModal\" className=\"modal\">\n         \n        <div className=\"modal-content\">\n            <span className=\"close\" data-type=\"hide-modal\" data-target=\"myModal\">&times;</span>\n            <h3>New User</h3>\n            <hr className=\"divider\"/>\n            { addUserError && <div className=\"panel code error-msg\">\n                  <ul>\n                    <li> {error}</li>    \n                  </ul>\n                   \n                </div>\n\n            }\n            { Object.keys(errors).length != 0 && \n                <div className=\"panel code error-msg\">\n                  <ul>\n                    \n                    {errors.firstName && <li> {errors.firstName.message} </li> }\n                    {errors.lastName && <li> {errors.lastName.message} </li> }\n    \n                    {errors.email && <li> {errors.email.message}</li> }\n                    {errors.phoneNumber && <li> {errors.phoneNumber.message} </li> }\n                    \n                  </ul>\n                   \n                </div>\n            }\n            \n            <form className=\"pure-form pure-form-aligned\" onSubmit={handleSubmit(onSubmit)}>\n              <fieldset>\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Firstname\">Firstname</label>\n                      <input name=\"firstName\" type=\"text\" id=\"Firstname\" placeholder=\"FirstName\" ref={\n                          register({\n                              required:\"FirstName is required\"\n                          })\n                      } />\n                  </div>\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Lastname\">Lastname</label>\n                      <input name=\"lastName\" type=\"text\" id=\"Lastname\" placeholder=\"LastName\" ref={\n                          register({\n                              required:\"LastName is required\"\n                          })\n                      } />\n                  </div>\n                  \n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Email\">Email Address</label>\n                      <input type=\"email\" name=\"email\" id=\"Email\" placeholder=\"Email Address\" ref={register({required:\"Email is required\", \n                            pattern:{\n                            value:pattern.EMAIL,\n                            message:errorMessage.INVALID_EMAIL\n                            }\n                        })} />\n                  </div>\n\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Phone\">Phone Number</label>\n                      <input type=\"tel\" name=\"phoneNumber\" pattern=\"^(\\+1[0-9]{3}|[0-9]{3})[0-9]{3}[0-9]{4}$\" id=\"Phone\" placeholder=\"Phone number\" ref={register({required:\"Phone Number is required\", \n                            pattern:{\n                            value:pattern.PHONE,\n                            message:errorMessage.INVALID_PHONE\n\n                            }\n                        })} />\n                  </div>\n                  \n                  <div className=\"pure-controls\">\n                      <button type=\"submit\" className=\"pure-button button-secondary\">Submit</button>\n                  </div>\n                </fieldset>\n              </form>\n          \n            \n        </div>\n    </div>\n}\n\n\nconst mapStateToProps = state => ({\n    addUserError: state.users.addUserError,\n  });\n\nconst mapDispatchToProps = {\n    addUser: userActions.logout\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(NewUserModal) \n"]},"metadata":{},"sourceType":"module"}