{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport glob from \"glob\";\nimport path from \"path\";\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\";\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { getPageList } from \"../utils/helpers\";\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      reduxStore = _ref.reduxStore,\n      persistor = _ref.persistor;\n  var Layout = Component.Layout || AdminLayout;\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }));\n}\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n    var _result$data;\n\n    var pathname, pagesDir, pages, response, result, accessToken, appProps, currentPath;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pathname = appContext.router.pathname;\n            pagesDir = path.resolve(\"\".concat(process.cwd(), \"/src/pages\"));\n            pages = glob.sync(\"\".concat(pagesDir, \"/**/*.js\"));\n            pages = pages.map(function (p) {\n              return p.replace(pagesDir, '').replace('.js', '');\n            });\n            pages = pages.filter(function (p) {\n              return p !== '/_app';\n            });\n            pages.unshift('/');\n            _context.next = 8;\n            return fetch(routeConstants.REFRESH_TOKEN, {\n              method: \"POST\",\n              credentials: 'include'\n            }, []);\n\n          case 8:\n            response = _context.sent;\n            _context.next = 11;\n            return response.json();\n\n          case 11:\n            result = _context.sent;\n            accessToken = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.accessToken;\n            accessToken = \"yyujndfvdjhfdjhdjf\";\n            appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"));\n            _context.next = 17;\n            return App.getInitialProps(appContext);\n\n          case 17:\n            appProps = _context.sent;\n            appContext.ctx.pages = pages;\n            console.log(\"current pathname is \".concat(pathname));\n\n            if (!pages.includes(pathname) || pathname === '/404') {\n              if (pathname !== '/404') {\n                appContext.ctx.res.writeHead(302, {\n                  Location: \"/404\"\n                });\n                appContext.ctx.res.end();\n              }\n            } else if (accessToken && accessToken !== \"\") {\n              appContext.ctx.reduxStore.dispatch(userActions.setAccessToken(accessToken)); // check that we are in SSR mode (NOT static and NOT client-side)\n\n              if (false && appContext.ctx.res.writeHead) {\n                // if path is / or login and we already have accessToken then change to /home\n                if (pathname === '/login' || pathname === '/' || pathname === '/index') {\n                  pathname = '/';\n                } //route to the path, when it has changes\n\n\n                currentPath = appContext.ctx.req.path;\n\n                if (pathname !== currentPath) {\n                  appContext.ctx.res.writeHead(302, {\n                    Location: pathname\n                  });\n                  appContext.ctx.res.end();\n                }\n              }\n            } else {\n              // no accessToken, route to login, if path is not already on /login \n              if (false && appContext.ctx.res.writeHead) {\n                if (pathname !== '/login') {\n                  appContext.ctx.res.writeHead(302, {\n                    Location: \"/login\"\n                  });\n                  appContext.ctx.res.end();\n                }\n              }\n            }\n\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withReduxStore(MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["glob","path","AdminLayout","Provider","PersistGate","withReduxStore","App","Container","userConstants","routeConstants","userActions","fetch","route","getPageList","MyApp","Component","pageProps","reduxStore","persistor","Layout","getInitialProps","appContext","pathname","router","pagesDir","resolve","process","cwd","pages","sync","map","p","replace","filter","unshift","REFRESH_TOKEN","method","credentials","response","json","result","accessToken","data","ctx","dispatch","defaultUser","appProps","console","log","includes","res","writeHead","Location","end","setAccessToken","currentPath","req"],"mappings":"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","sourcesContent":["import glob from \"glob\"\nimport path from \"path\"\n\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\"\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\"\nimport { getPageList } from \"../utils/helpers\"\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  \n \n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/ui.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (appContext) => {\n\n    let pathname = appContext.router.pathname\n\n    const pagesDir = path.resolve(`${process.cwd()}/src/pages`)\n    let pages = glob.sync(`${pagesDir}/**/*.js`)\n    pages = pages.map(p => p.replace(pagesDir, '').replace('.js',''))\n    pages = pages.filter(p => (p !== '/_app'))\n    pages.unshift('/')\n\n\n    \n    const response = await fetch(routeConstants.REFRESH_TOKEN,{\n      method:\"POST\",\n      credentials:'include'\n    },[])\n    const result = await response.json()\n    let accessToken = result.data?.accessToken;\n    accessToken = \"yyujndfvdjhfdjhdjf\"\n\n    \n\n    appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"))\n    const appProps = await App.getInitialProps(appContext);\n\n    appContext.ctx.pages = pages\n    console.log(`current pathname is ${pathname}`)\n    \n    if(!pages.includes(pathname) || pathname === '/404'){\n      \n      if (pathname !== '/404') {\n        appContext.ctx.res.writeHead(302, { Location: \"/404\" });\n        appContext.ctx.res.end();\n      }\n    }\n    else if (accessToken && accessToken !== \"\"){\n      appContext.ctx.reduxStore.dispatch(userActions.setAccessToken(accessToken))\n      \n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        \n        \n        // if path is / or login and we already have accessToken then change to /home\n        if (pathname === '/login' || pathname === '/' || pathname === '/index') {\n          pathname = '/'  \n        }\n\n        //route to the path, when it has changes\n        const currentPath = appContext.ctx.req.path\n        if(pathname !== currentPath){\n          appContext.ctx.res.writeHead(302, { Location: pathname });\n          appContext.ctx.res.end();\n        }\n        \n        \n      }\n    }else { \n      // no accessToken, route to login, if path is not already on /login \n\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        if (pathname !== '/login') {\n            appContext.ctx.res.writeHead(302, { Location: \"/login\" });\n            appContext.ctx.res.end();\n        }\n        \n      }\n    }\n\n    return { ...appProps};\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}