{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport glob from \"glob\";\nimport path from \"path\";\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\";\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { getPageList } from \"../utils/helpers\";\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      reduxStore = _ref.reduxStore,\n      persistor = _ref.persistor;\n  var Layout = Component.Layout || AdminLayout;\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }));\n}\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n    var _result$data;\n\n    var pagesDir, pages, currentUser, response, result, accessToken, urlPath, appProps;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //const pages = await glob('pages/**/*.js', { cwd: __dirname })\n            pagesDir = path.resolve(\"\".concat(__dirname, \"/src/pages\"));\n            _context.next = 3;\n            return glob('/pages/**/*.js', {\n              cwd: __dirname\n            }).map(function (p) {\n              return p.replace(pagesDir, '').replace('index.js', '').replace('.js', '');\n            });\n\n          case 3:\n            pages = _context.sent;\n            pages.map(function (p) {\n              console.log(\"The pages in \".concat(p));\n            }); //console.log(`The pages in ${JSON.stringify(pages)}`);\n\n            currentUser = true;\n            _context.next = 8;\n            return fetch(routeConstants.REFRESH_TOKEN, {\n              method: \"POST\",\n              credentials: 'include'\n            }, []);\n\n          case 8:\n            response = _context.sent;\n            _context.next = 11;\n            return response.json();\n\n          case 11:\n            result = _context.sent;\n            accessToken = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.accessToken;\n            urlPath = appContext.router.pathname;\n            appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"));\n            _context.next = 17;\n            return App.getInitialProps(appContext);\n\n          case 17:\n            appProps = _context.sent;\n\n            if (accessToken && accessToken !== \"\") {\n              appContext.ctx.reduxStore.dispatch(userActions.setAccessToken(accessToken)); // check that we are in SSR mode (NOT static and NOT client-side)\n\n              if (false && appContext.ctx.res.writeHead) {\n                // if path is / or login and we already have accessToken then change to /home\n                if (urlPath === '/login' || urlPath === '/') {\n                  urlPath = '/home';\n                } //route to the path\n\n\n                appContext.ctx.res.writeHead(302, {\n                  Location: urlPath\n                });\n                appContext.ctx.res.end();\n              }\n            } else {\n              // no accessToken, route to login, if path is not already on /login \n              if (false && appContext.ctx.res.writeHead) {\n                if (urlPath !== '/login') {\n                  appContext.ctx.res.writeHead(302, {\n                    Location: \"/login\"\n                  });\n                  appContext.ctx.res.end();\n                }\n              }\n            }\n\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withReduxStore(MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["glob","path","AdminLayout","Provider","PersistGate","withReduxStore","App","Container","userConstants","routeConstants","userActions","fetch","route","getPageList","MyApp","Component","pageProps","reduxStore","persistor","Layout","getInitialProps","appContext","pagesDir","resolve","__dirname","cwd","map","p","replace","pages","console","log","currentUser","REFRESH_TOKEN","method","credentials","response","json","result","accessToken","data","urlPath","router","pathname","ctx","dispatch","defaultUser","appProps","setAccessToken","res","writeHead","Location","end"],"mappings":"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","sourcesContent":["import glob from \"glob\"\nimport path from \"path\"\n\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\"\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\"\nimport { getPageList } from \"../utils/helpers\"\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  \n \n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/ui.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (appContext) => {\n\n    //const pages = await glob('pages/**/*.js', { cwd: __dirname })\n    const pagesDir = path.resolve(`${__dirname}/src/pages`)\n    const pages = await glob('/pages/**/*.js', { cwd: __dirname })\n      .map(p => p\n        .replace(pagesDir, '')\n        .replace('index.js', '')\n        .replace('.js', '')\n      )\n\n   \n    pages.map(p => {\n      console.log(`The pages in ${p}`)\n    })\n    //console.log(`The pages in ${JSON.stringify(pages)}`);\n\n    const currentUser = true\n    const response = await fetch(routeConstants.REFRESH_TOKEN,{\n      method:\"POST\",\n      credentials:'include'\n    },[])\n    const result = await response.json()\n    const accessToken = result.data?.accessToken;\n\n\n    let urlPath = appContext.router.pathname\n\n    appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"))\n    const appProps = await App.getInitialProps(appContext);\n    if (accessToken && accessToken !== \"\"){\n      appContext.ctx.reduxStore.dispatch(userActions.setAccessToken(accessToken))\n      \n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        \n        \n        // if path is / or login and we already have accessToken then change to /home\n        if (urlPath === '/login' || urlPath === '/') {\n          urlPath = '/home'  \n        }\n\n        //route to the path\n        appContext.ctx.res.writeHead(302, { Location: urlPath });\n        appContext.ctx.res.end();\n        \n      }\n    }else { \n      // no accessToken, route to login, if path is not already on /login \n\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        if (urlPath !== '/login') {\n            appContext.ctx.res.writeHead(302, { Location: \"/login\" });\n            appContext.ctx.res.end();\n        }\n        \n      }\n    }\n\n    return { ...appProps};\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}