{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport { encrypt, decrypt } from \"../utils/crypt\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\";\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { getPageList } from \"../utils/helpers\";\nimport Cookies from \"universal-cookie\";\n\nfunction MyApp({\n  Component,\n  pageProps,\n  reduxStore,\n  persistor\n}) {\n  const Layout = Component.Layout || AdminLayout;\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }));\n}\n\nMyApp.getInitialProps = async appContext => {\n  const appProps = await App.getInitialProps(appContext);\n  let encrytedToken = appContext.ctx.req ? appContext.ctx.req.headers.cookie : undefined;\n  let token,\n      user = null;\n\n  if (encrytedToken && encrytedToken !== undefined) {\n    encrytedToken = new Cookies(encrytedToken).get;\n    console.log(encrytedToken);\n    token = decrypt(encrytedToken);\n  }\n\n  console.log(token);\n\n  if (token) {\n    var _result$data, _result$data2;\n\n    // make request to server for a refresh token\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    headers['Authorization'] = 'Bearer ' + token;\n    const response = await fetch(routeConstants.REFRESH_TOKEN, {\n      method: \"POST\",\n      headers\n    }, []);\n    const result = await response.json();\n    user = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.user;\n    token = (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : _result$data2.token;\n  }\n\n  let pathname = appContext.router.pathname;\n\n  if (user && user != undefined) {\n    console.log(JSON.stringify(user));\n    appContext.ctx.reduxStore.dispatch({\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    });\n    appContext.ctx.reduxStore.dispatch({\n      type: userConstants.TOKEN_SUCCESS,\n      token\n    });\n    const currentPath = appContext.ctx.req.path; // check that we are in SSR mode (NOT static and NOT client-side)\n\n    if (true && appContext.ctx.res.writeHead) {\n      // if path is / or login and we already have accessToken then change to /home\n      if (pathname === '/login' || pathname === '/' || pathname === '/index') {\n        pathname = '/home';\n      } //route to the path, when it has changed\n\n\n      if (pathname !== currentPath) {\n        appContext.ctx.res.writeHead(302, {\n          Location: pathname\n        });\n        appContext.ctx.res.end();\n      }\n    }\n  }\n\n  return _objectSpread({}, appProps);\n};\n\nexport default withReduxStore(MyApp);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["encrypt","decrypt","AdminLayout","Provider","PersistGate","withReduxStore","App","Container","userConstants","routeConstants","userActions","fetch","route","getPageList","Cookies","MyApp","Component","pageProps","reduxStore","persistor","Layout","getInitialProps","appContext","appProps","encrytedToken","ctx","req","headers","cookie","undefined","token","user","get","console","log","response","REFRESH_TOKEN","method","result","json","data","pathname","router","JSON","stringify","dispatch","type","LOGIN_SUCCESS","TOKEN_SUCCESS","currentPath","path","res","writeHead","Location","end"],"mappings":"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","sourcesContent":["\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\nimport {encrypt, decrypt} from \"../utils/crypt\";\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\"\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\"\nimport { getPageList } from \"../utils/helpers\"\n\nimport Cookies from \"universal-cookie\";\n\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  \n \n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/ui.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (appContext) => {\n\n    \n\n    const appProps = await App.getInitialProps(appContext);\n    let encrytedToken = appContext.ctx.req? appContext.ctx.req.headers.cookie : undefined\n    \n    let token, user = null\n    if(encrytedToken && encrytedToken !== undefined) {\n      encrytedToken = new Cookies(encrytedToken).get\n      console.log(encrytedToken)\n      token = decrypt(encrytedToken)\n    }\n\n    console.log(token)\n\n    if (token){\n\n      // make request to server for a refresh token\n      const headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n        }\n  \n      headers['Authorization'] = 'Bearer ' + token\n  \n      \n      const response = await fetch(routeConstants.REFRESH_TOKEN,{\n        method:\"POST\",\n        headers\n      },[])\n  \n      const result = await response.json()\n      user = result.data?.user;\n      token = result.data?.token\n    }\n    \n\n    let pathname = appContext.router.pathname\n    \n  \n    \n    \n    if (user && user != undefined){\n      \n      console.log(JSON.stringify(user))\n      \n      appContext.ctx.reduxStore.dispatch({type:userConstants.LOGIN_SUCCESS, user})\n      appContext.ctx.reduxStore.dispatch({type:userConstants.TOKEN_SUCCESS, token})\n      const currentPath = appContext.ctx.req.path\n      \n\n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        \n        \n        // if path is / or login and we already have accessToken then change to /home\n        if (pathname === '/login' || pathname === '/' || pathname === '/index') {\n          pathname = '/home'  \n        }\n\n        //route to the path, when it has changed\n        \n        if(pathname !== currentPath){\n          appContext.ctx.res.writeHead(302, { Location: pathname });\n          appContext.ctx.res.end();\n        }\n        \n        \n      }\n    } \n\n\n    return { ...appProps};\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}