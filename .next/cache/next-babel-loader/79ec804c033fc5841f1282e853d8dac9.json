{"ast":null,"code":"import express from \"express\";\nimport next from \"next\";\nimport \"dotenv/config\";\nvar PORT = parseInt(process.env.PORT) || 3000;\nvar HOST = process.env.HOST || \"http://localhost\";\nvar dev = true;\nvar app = next({\n  dev: dev\n});\nvar handle = app.getRequestHandler();\napp.prepare().then(function () {\n  var server = express();\n  server.get(\"*\", function (req, res) {\n    return handle(req, res);\n  });\n  server.listen(PORT, function (error) {\n    if (error) throw error;\n    console.log(\"> Client listening on \".concat(HOST, \":\").concat(PORT));\n  });\n});","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/index.js"],"names":["express","next","PORT","parseInt","process","env","HOST","dev","app","handle","getRequestHandler","prepare","then","server","get","req","res","listen","error","console","log"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,eAAP;AAEA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYH,IAAb,CAAR,IAA8B,IAA3C;AACA,IAAMI,IAAI,GAAGF,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,kBAAjC;AACA,IAAMC,GAAG,OAAT;AACA,IAAMC,GAAG,GAAGP,IAAI,CAAC;AAACM,EAAAA,GAAG,EAAHA;AAAD,CAAD,CAAhB;AACA,IAAME,MAAM,GAAGD,GAAG,CAACE,iBAAJ,EAAf;AAGAF,GAAG,CAACG,OAAJ,GAAcC,IAAd,CAAmB,YAAM;AACrB,MAAMC,MAAM,GAAGb,OAAO,EAAtB;AACAa,EAAAA,MAAM,CAACC,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,WAAOP,MAAM,CAACM,GAAD,EAAMC,GAAN,CAAb;AACH,GAFD;AAIAH,EAAAA,MAAM,CAACI,MAAP,CAAcf,IAAd,EAAoB,UAACgB,KAAD,EAAW;AAC3B,QAAGA,KAAH,EAAU,MAAMA,KAAN;AACVC,IAAAA,OAAO,CAACC,GAAR,iCAAqCd,IAArC,cAA6CJ,IAA7C;AACH,GAHD;AAIH,CAVD","sourcesContent":["import express from \"express\";\nimport next from \"next\";\nimport \"dotenv/config\";\n\nconst PORT = parseInt(process.env.PORT) || 3000;\nconst HOST = process.env.HOST || \"http://localhost\"\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({dev});\nconst handle = app.getRequestHandler();\n\n\napp.prepare().then(() => {\n    const server = express();\n    server.get(\"*\", (req, res) => {\n        return handle(req, res)\n    })\n\n    server.listen(PORT, (error) => {\n        if(error) throw error;\n        console.log(`> Client listening on ${HOST}:${PORT}`)\n    })\n})\n\n"]},"metadata":{},"sourceType":"module"}