{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\nimport { closeModal } from \"../utils/functions\";\nimport Papa from \"papaparse\";\n\nconst UploadReportModal = ({\n  children,\n  pageProps,\n  uploadReport,\n  uploadReportSuccess,\n  uploadReportError,\n  selectedUser\n}) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm();\n\n  const processData = (headers, body) => {\n    //console.log(headers)\n    //console.log(body)\n    const requestBody = {};\n    const mainKey = headers[0];\n    const jsonData = {};\n\n    for (let i = 1; i < headers.length; i++) {\n      let record = {};\n      let key = headers[i];\n      body.map(line => {\n        let field = line[mainKey];\n        let value = line[key];\n        field = field.replace(/\\s/g, \"_\");\n        field = field.replace(\"(\", \"\");\n        field = field.replace(\")\", \"\");\n        field = field.replace(\",\", \"\");\n        field = field.replace(\"%\", \"P\");\n        value = value.replace(\",\", \"\");\n        record[field] = value;\n      });\n\n      if (key == \"Total\") {\n        const weeks = headers.slice(2);\n        const weekNumbers = weeks.map(w => w.split(\" \")[1]).join(\",\");\n        const weekNames = weeks.join(\",\").replace(/\\s/g, \"_\");\n        record[\"Week_Names\"] = weekNames;\n        record[\"Week_Numbers\"] = weekNumbers;\n      } else {\n        record[\"Week_Name\"] = key.replace(\" \", \"_\");\n        record[\"Week_Number\"] = key.split(\" \")[1];\n      }\n\n      key = key.replace(\" \", \"_\");\n      jsonData[key] = record;\n    }\n\n    requestBody[\"userId\"] = selectedUser.id;\n    requestBody[\"data\"] = jsonData;\n    return requestBody;\n  };\n\n  const onSubmit = formData => {\n    const file = formData.selectedFile[0];\n\n    try {} catch (error) {}\n\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: result => {\n        if (result.errors.length != 0) throw Error(JSON.stringify(result.errors));\n        const body = processData(result.meta.fields, result.data);\n        console.log(body);\n        uploadReport(body);\n\n        if (uploadReportSuccess) {\n          closeModal(\"uploadReportModal\"); // reset form\n\n          reset();\n        }\n      }\n    }); //addUser(formData);\n    // if (!addUserError){\n    //     reset()\n    // }\n  };\n\n  return __jsx(\"div\", {\n    id: \"uploadReportModal\",\n    className: \"modal\"\n  }, __jsx(\"div\", {\n    className: \"modal-content\"\n  }, __jsx(\"span\", {\n    className: \"close\",\n    \"data-type\": \"hide-modal\",\n    \"data-target\": \"uploadReportModal\"\n  }, \"\\xD7\"), selectedUser && __jsx(\"h3\", null, \"Upload a report for \", __jsx(\"span\", {\n    className: \"blue\"\n  }, selectedUser.firstName + \" \" + selectedUser.lastName)), __jsx(\"hr\", {\n    className: \"divider\"\n  }), uploadReportError && uploadReportError.length > 0 && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \" \", uploadReportError))), Object.keys(errors).length != 0 && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, errors.selectedFile && __jsx(\"li\", null, \" \", errors.selectedFile.message, \" \"))), __jsx(\"form\", {\n    className: \"pure-form pure-form-stacked\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"fieldset\", null, __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"selectedFile\"\n  }, \"Select file\"), __jsx(\"input\", {\n    name: \"selectedFile\",\n    required: true,\n    type: \"file\",\n    id: \"selectedFile\",\n    placeholder: \"choose report file (csv)\",\n    ref: register({\n      validate: function (value) {\n        const filename = value[0].name; // Allowing file type \n        //var allowedExtensions =  /(\\.jpg|\\.jpeg|\\.png|\\.gif)$/i; \n\n        var allowedExtensions = /(\\.csv)$/i;\n\n        if (!allowedExtensions.exec(filename)) {\n          return 'Invalid CSV file upload';\n        }\n\n        return true;\n      }\n    })\n  })), __jsx(\"br\", null), __jsx(\"div\", {\n    className: \"pure-controls\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"pure-button button-secondary\"\n  }, \"Submit\"))))));\n};\n\nconst mapStateToProps = state => ({\n  selectedUser: state.users.selectedUser,\n  uploadReportSuccess: state.users.uploadReportSuccess,\n  uploadReportError: state.users.uploadReportError\n});\n\nconst mapDispatchToProps = {\n  uploadReport: userActions.uploadReport\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadReportModal);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/components/uploadReportModal.js"],"names":["Link","userActions","connect","useForm","pattern","errorMessage","closeModal","Papa","UploadReportModal","children","pageProps","uploadReport","uploadReportSuccess","uploadReportError","selectedUser","register","handleSubmit","reset","errors","processData","headers","body","requestBody","mainKey","jsonData","i","length","record","key","map","line","field","value","replace","weeks","slice","weekNumbers","w","split","join","weekNames","id","onSubmit","formData","file","selectedFile","error","parse","header","skipEmptyLines","complete","result","Error","JSON","stringify","meta","fields","data","console","log","firstName","lastName","Object","keys","message","validate","filename","name","allowedExtensions","exec","mapStateToProps","state","users","mapDispatchToProps"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\nimport {  closeModal } from \"../utils/functions\";\n\nimport Papa from \"papaparse\"\n\nconst UploadReportModal = ({children, pageProps,uploadReport, uploadReportSuccess, uploadReportError,selectedUser}) => {\n    const {register, handleSubmit,reset, errors} = useForm();\n    \n\n    const processData = (headers, body ) => {\n        //console.log(headers)\n        //console.log(body)\n        const requestBody = {}\n\n        const mainKey = headers[0]\n        const jsonData = {} \n        for (let i = 1; i < headers.length; i++) {\n            let record = {}\n            let key = headers[i]\n            body.map(line => {\n               \n\n                let field = line[mainKey]\n                let value = line[key]\n\n                field = field.replace(/\\s/g, \"_\")\n                field = field.replace(\"(\", \"\")\n                field = field.replace(\")\", \"\")\n                field = field.replace(\",\", \"\")\n                field = field.replace(\"%\", \"P\")\n\n                value = value.replace(\",\", \"\")\n\n                record[field] = value\n            })\n\n            if (key == \"Total\"){\n                const weeks = headers.slice(2)\n                const weekNumbers = weeks.map(w => w.split(\" \")[1]).join(\",\")\n                const weekNames = weeks.join(\",\").replace(/\\s/g, \"_\")\n\n                record[\"Week_Names\"] = weekNames\n                record[\"Week_Numbers\"] = weekNumbers\n\n            }else {\n\n                record[\"Week_Name\"] = key.replace(\" \", \"_\")\n                record[\"Week_Number\"] = key.split(\" \")[1]\n            }\n\n            key = key.replace(\" \", \"_\")\n\n            jsonData[key] = record\n\n\n        }\n\n        requestBody[\"userId\"] = selectedUser.id\n        requestBody[\"data\"] = jsonData\n        \n        return requestBody\n    }\n\n    const onSubmit = formData => {\n        \n        const file = formData.selectedFile[0]\n\n \n        try {\n            \n        } catch (error) {\n            \n        }\n        Papa.parse(file, {\n            header:true,\n            skipEmptyLines:true,\n            \n            complete: result => {\n                if (result.errors.length != 0)\n                    throw Error(JSON.stringify(result.errors))\n                const body = processData(result.meta.fields, result.data)\n                console.log(body)\n                uploadReport(body)\n\n                if (uploadReportSuccess){\n                    closeModal(\"uploadReportModal\")\n\n                    // reset form\n                    reset()\n                }\n                \n            }\n        })\n        \n\n\n        \n        //addUser(formData);\n\n        \n        // if (!addUserError){\n        //     reset()\n            \n        // }\n            \n\n    }\n    return <div id=\"uploadReportModal\" className=\"modal\">\n         \n        <div className=\"modal-content\">\n            <span className=\"close\" data-type=\"hide-modal\" data-target=\"uploadReportModal\">&times;</span>\n            {selectedUser && <h3>Upload a report for <span className=\"blue\">{selectedUser.firstName + \" \" + selectedUser.lastName}</span></h3> }\n            <hr className=\"divider\"/>\n            \n            { uploadReportError && uploadReportError.length > 0 && <div className=\"panel code error-msg\">\n                  <ul>\n                    <li> {uploadReportError}</li>    \n                  </ul>\n                   \n                </div>\n\n            }\n\n            { Object.keys(errors).length != 0 && \n                            <div className=\"panel code error-msg\">\n                            <ul>\n                                \n                                {errors.selectedFile && <li> {errors.selectedFile.message} </li> }\n                                \n                            </ul>\n                            \n                            </div>\n            }\n            \n            \n            <form className=\"pure-form pure-form-stacked\" onSubmit={handleSubmit(onSubmit)}>\n              <fieldset>\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"selectedFile\">Select file</label>\n                      <input name=\"selectedFile\" required={true} type=\"file\" id=\"selectedFile\" placeholder=\"choose report file (csv)\" ref={register({\n                          validate: function (value) {\n                                \n                                const filename = value[0].name\n                                // Allowing file type \n                                //var allowedExtensions =  /(\\.jpg|\\.jpeg|\\.png|\\.gif)$/i; \n                                var allowedExtensions =  /(\\.csv)$/i; \n                                if (!allowedExtensions.exec(filename)) { \n                            \n                                    return 'Invalid CSV file upload'; \n                                } \n\n                                return true;\n                                  \n                              }\n                      })} />\n                  </div>\n                  <br/>\n                  \n                  <div className=\"pure-controls\">\n                      <button type=\"submit\" className=\"pure-button button-secondary\">Submit</button>\n                  </div>\n                </fieldset>\n              </form>\n          \n            \n        </div>\n    </div>\n}\n\n\nconst mapStateToProps = state => ({\n    selectedUser: state.users.selectedUser,\n    uploadReportSuccess: state.users.uploadReportSuccess,\n    uploadReportError: state.users.uploadReportError,\n  });\n\nconst mapDispatchToProps = {\n    uploadReport: userActions.uploadReport\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(UploadReportModal) \n"]},"metadata":{},"sourceType":"module"}