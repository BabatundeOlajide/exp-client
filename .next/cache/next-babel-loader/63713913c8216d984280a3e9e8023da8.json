{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { userConstants } from '../constants';\nimport { userActions } from \"../actions\";\n\nfunction MyApp({\n  Component,\n  pageProps,\n  reduxStore,\n  persistor\n}) {\n  const Layout = Component.Layout || AdminLayout;\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }));\n}\n\nMyApp.getInitialProps = async appContext => {\n  //const currentUser = await getCurrentUser(); // define this beforehand\n  const currentUser = true; //appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"))\n\n  const appProps = await App.getInitialProps(appContext); // check that we are in SSR mode (NOT static and NOT client-side)\n\n  if (true && appContext.ctx.res.writeHead) {\n    if (currentUser && appContext.router.pathname !== '/home') {\n      appContext.ctx.res.writeHead(302, {\n        Location: \"/home\"\n      });\n      appContext.ctx.res.end();\n    }\n  }\n\n  return _objectSpread({}, appProps);\n};\n\nexport default withReduxStore(MyApp);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["AdminLayout","Provider","PersistGate","withReduxStore","App","Container","userConstants","userActions","MyApp","Component","pageProps","reduxStore","persistor","Layout","getInitialProps","appContext","currentUser","appProps","ctx","res","writeHead","router","pathname","Location","end"],"mappings":";;;;;;;;;AAEA,OAAO,6BAAP;AACA,OAAO,yCAAP;AACA,OAAO,8BAAP;AACA,OAAO,yBAAP;AAEA,OAAO,uBAAP;AAIA,OAAOA,WAAP,MAAwB,mCAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,UAAxB;AAAoCC,EAAAA;AAApC,CAAf,EAAgE;AAC9D,QAAMC,MAAM,GAAGJ,SAAS,CAACI,MAAV,IAAoBb,WAAnC;AAGA,SACE,4BACA,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEW;AAAjB,KACE,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE,IAAtB;AAA4B,IAAA,SAAS,EAAEC;AAAvC,KACE,MAAC,MAAD,EAAYF,SAAZ,EACE,MAAC,SAAD,EAAeA,SAAf,CADF,CADF,CADF,CADA,EASE;AAAQ,IAAA,IAAI,EAAC,iBAAb;AAA+B,IAAA,GAAG,EAAC;AAAnC,IATF,EAUE;AAAQ,IAAA,IAAI,EAAC,iBAAb;AAA+B,IAAA,GAAG,EAAC;AAAnC,IAVF,EAWE;AAAQ,IAAA,IAAI,EAAC,iBAAb;AAA+B,IAAA,GAAG,EAAC;AAAnC,IAXF,CADF;AAeD;;AAEDF,KAAK,CAACM,eAAN,GAAwB,MAAOC,UAAP,IAAsB;AAC1C;AACA,QAAMC,WAAW,GAAG,IAApB,CAF0C,CAG1C;;AACA,QAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACU,eAAJ,CAAoBC,UAApB,CAAvB,CAJ0C,CAK1C;;AACA,MAAI,QAAiCA,UAAU,CAACG,GAAX,CAAeC,GAAf,CAAmBC,SAAxD,EAAmE;AACjE,QAAIJ,WAAW,IAAID,UAAU,CAACM,MAAX,CAAkBC,QAAlB,KAA+B,OAAlD,EAA2D;AACvDP,MAAAA,UAAU,CAACG,GAAX,CAAeC,GAAf,CAAmBC,SAAnB,CAA6B,GAA7B,EAAkC;AAAEG,QAAAA,QAAQ,EAAE;AAAZ,OAAlC;AACAR,MAAAA,UAAU,CAACG,GAAX,CAAeC,GAAf,CAAmBK,GAAnB;AACH;AACF;;AACD,2BAAYP,QAAZ;AACH,CAbD;;AAeA,eAAed,cAAc,CAACK,KAAD,CAA7B","sourcesContent":["\n\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { userConstants } from '../constants';\nimport { userActions } from \"../actions\"\n\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  \n \n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/ui.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (appContext) => {\n    //const currentUser = await getCurrentUser(); // define this beforehand\n    const currentUser = true\n    //appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"))\n    const appProps = await App.getInitialProps(appContext);\n    // check that we are in SSR mode (NOT static and NOT client-side)\n    if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n      if (currentUser && appContext.router.pathname !== '/home') {\n          appContext.ctx.res.writeHead(302, { Location: \"/home\" });\n          appContext.ctx.res.end();\n      }\n    }\n    return { ...appProps};\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}