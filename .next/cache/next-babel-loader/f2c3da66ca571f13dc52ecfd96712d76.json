{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { routeConstants, userConstants } from \"../constants\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nimport Cookies from \"universal-cookie\";\nimport Cryptr from \"cryptr\";\nexport default class AuthService {\n  constructor() {\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.cookie = new Cookies();\n    this.cryptr = new Cryptr(process.env.ACCESS_TOKEN_ENC_KEY || \"ty#eyrbdy8937b@Ja\");\n  }\n\n  login(email, password) {\n    // Get a token\n    return this.fetch(routeConstants.ADMIN_LOGIN, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res); // return this.fetch(`${this.domain}/api/user`, {\n      //     method: 'GET'\n      // })\n\n      return Promise.resolve(res);\n    }) // .then(res => {\n    //     this.setProfile(res)\n    //     return Promise.resolve(res)\n    // })\n    .catch(error => {\n      console.log(error);\n      return Promise.resolve(error);\n    });\n  }\n\n  loginAdmin(email, password) {\n    // Get a token\n    return this.fetch(routeConstants.ADMIN_LOGIN, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.accessToken);\n      return this.fetch(routeConstants.ADMIN_PROFILE, {\n        method: 'GET'\n      });\n    }).then(res => {\n      this.setProfile(res.profile);\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // return !!token && !isTokenExpired(token) // handwaiving here\n\n    return !!token; // handwaiving here\n  }\n\n  setProfile(profile) {\n    // Saves profile data to redux store\n    con;\n    dispatch({\n      type: userConstants.USER_PROFILE,\n      profile\n    });\n  }\n\n  getProfile() {// Retrieves the profile data from redux state\n    //return useSelector(state => state.authentication?.profile)\n  }\n\n  setToken(accessToken) {\n    const encryptedToken = this.cryptr.encrypt(accessToken);\n    console.log('At setToken, token = ' + encryptedToken);\n    this.cookie.set('atk', encryptedToken, {\n      httpOnly: true\n    });\n  }\n\n  getToken() {\n    const encyptedToken = this.cookie.get('atk');\n\n    if (!encyptedToken) {\n      return \"\";\n    }\n\n    const accessToken = this.cryptr.decrypt(encyptedToken);\n    console.log('At getToken, token = ' + accessToken);\n    return accessToken;\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('profile');\n  }\n\n  async _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = await response.json();\n      console.log(error.response);\n      throw error;\n    }\n  }\n\n  fetch(url, options) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer ' + this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/services/AuthService.js"],"names":["routeConstants","userConstants","useSelector","useDispatch","useStore","App","store","Cookies","Cryptr","AuthService","constructor","fetch","bind","login","getProfile","cookie","cryptr","process","env","ACCESS_TOKEN_ENC_KEY","email","password","ADMIN_LOGIN","method","body","JSON","stringify","then","res","setToken","Promise","resolve","catch","error","console","log","loginAdmin","accessToken","ADMIN_PROFILE","setProfile","profile","loggedIn","token","getToken","con","dispatch","type","USER_PROFILE","encryptedToken","encrypt","set","httpOnly","encyptedToken","get","decrypt","logout","localStorage","removeItem","_checkStatus","response","status","Error","statusText","json","url","options","headers"],"mappings":"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","sourcesContent":["import {routeConstants, userConstants } from \"../constants\";\nimport {  useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nimport Cookies from \"universal-cookie\";\nimport Cryptr from \"cryptr\";\nexport default class AuthService {\n    constructor() {\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n        this.cookie = new Cookies()\n        this.cryptr = new Cryptr(process.env.ACCESS_TOKEN_ENC_KEY || \"ty#eyrbdy8937b@Ja\")\n        \n    }\n\n    login(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n        .then(res => {\n            this.setToken(res)\n            // return this.fetch(`${this.domain}/api/user`, {\n            //     method: 'GET'\n            // })\n            return Promise.resolve(res)\n        })\n        // .then(res => {\n        //     this.setProfile(res)\n        //     return Promise.resolve(res)\n        // })\n        .catch(error => {\n            console.log(error)\n            return Promise.resolve(error)\n        })\n        \n    }\n\n    loginAdmin(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.accessToken)\n            return this.fetch(routeConstants.ADMIN_PROFILE, {\n                method: 'GET'\n            })\n        }).then(res => {\n            this.setProfile(res.profile)\n            return Promise.resolve(res)\n        })\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        // return !!token && !isTokenExpired(token) // handwaiving here\n        return !!token // handwaiving here\n    }\n\n    setProfile(profile) {\n        // Saves profile data to redux store\n        con\n        dispatch({type: userConstants.USER_PROFILE, profile})\n    }\n\n    getProfile() {\n        // Retrieves the profile data from redux state\n        //return useSelector(state => state.authentication?.profile)\n    }\n\n    setToken(accessToken) {\n        const encryptedToken = this.cryptr.encrypt(accessToken)\n        console.log('At setToken, token = ' + encryptedToken)\n        this.cookie.set('atk', encryptedToken, {httpOnly:true})\n    }\n\n    getToken() {\n\n        const encyptedToken = this.cookie.get('atk')\n        if(!encyptedToken){\n            return \"\"\n        }\n\n        const accessToken = this.cryptr.decrypt(encyptedToken)\n        console.log('At getToken, token = ' + accessToken)\n        return accessToken\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        localStorage.removeItem('profile');\n    }\n\n    async _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = await response.json()\n            console.log(error.response)\n            throw error\n        }\n    }\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}