{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App, { Container } from 'next/app';\nimport { Provider } from 'react-redux';\nimport { initializeStore } from '../store';\nimport { persistStore } from 'redux-persist';\nconst isServer = true;\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Store in global variable if client\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nconst wrapper = App => {\n  return class Redux extends React.Component {\n    static async getInitialProps(appContext) {\n      const reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.reduxStore = reduxStore;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appContext);\n      }\n\n      const currentUser = true; //const appProps = await App.getInitialProps(appContext);\n      // check that we are in SSR mode (NOT static and NOT client-side)\n\n      if (true && appContext.ctx.res.writeHead) {\n        if (currentUser) {\n          console.log('called here');\n          appContext.ctx.res.writeHead(302, {\n            Location: \"/home\"\n          });\n          appContext.ctx.res.end();\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, appProps), {}, {\n        initialReduxState: reduxStore.getState()\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n      this.persistor = persistStore(this.reduxStore);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        reduxStore: this.reduxStore,\n        persistor: this.persistor\n      }));\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/lib/with-redux-store.js"],"names":["App","Container","Provider","initializeStore","persistStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","wrapper","Redux","React","Component","getInitialProps","appContext","reduxStore","ctx","appProps","currentUser","res","writeHead","console","log","Location","end","initialReduxState","getState","constructor","props","persistor","render"],"mappings":";;;;;;;;;;;AAAA,OAAOA,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,eAAR,QAA8B,UAA9B;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC;AACA,MAAIH,QAAJ,EAAc;AACZ,WAAOF,eAAe,CAACK,YAAD,CAAtB;AACD,GAJqC,CAMtC;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BH,eAAe,CAACK,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;;AAED,MAAMI,OAAO,GAAIV,GAAD,IAAS;AACvB,SAAO,MAAMW,KAAN,SAAoBC,KAAK,CAACC,SAA1B,CAAoC;AACzC,iBAAaC,eAAb,CAA8BC,UAA9B,EAA0C;AACxC,YAAMC,UAAU,GAAGT,gBAAgB,EAAnC,CADwC,CAGxC;;AACAQ,MAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAIlB,GAAG,CAACc,eAAR,EAAyB;AACvBI,QAAAA,QAAQ,GAAG,MAAMlB,GAAG,CAACc,eAAJ,CAAoBC,UAApB,CAAjB;AACD;;AAED,YAAMI,WAAW,GAAG,IAApB,CAXwC,CAYxC;AACA;;AACA,UAAI,QAAiCJ,UAAU,CAACE,GAAX,CAAeG,GAAf,CAAmBC,SAAxD,EAAmE;AACjE,YAAIF,WAAJ,EAAiB;AACbG,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAR,UAAAA,UAAU,CAACE,GAAX,CAAeG,GAAf,CAAmBC,SAAnB,CAA6B,GAA7B,EAAkC;AAAEG,YAAAA,QAAQ,EAAE;AAAZ,WAAlC;AACAT,UAAAA,UAAU,CAACE,GAAX,CAAeG,GAAf,CAAmBK,GAAnB;AACH;AACF;;AAED,6CACKP,QADL;AAEEQ,QAAAA,iBAAiB,EAAEV,UAAU,CAACW,QAAX;AAFrB;AAID;;AAEDC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKb,UAAL,GAAkBT,gBAAgB,CAACsB,KAAK,CAACH,iBAAP,CAAlC;AACA,WAAKI,SAAL,GAAiB1B,YAAY,CAAC,KAAKY,UAAN,CAA7B;AACD;;AAEDe,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,QAAA,UAAU,EAAE,KAAKb,UAAtC;AAAkD,QAAA,SAAS,EAAE,KAAKc;AAAlE,SAAP;AACD;;AArCwC,GAA3C;AAuCD,CAxCD","sourcesContent":["import App, {Container} from 'next/app'\nimport {Provider} from 'react-redux'\nimport {initializeStore} from '../store'\nimport { persistStore } from 'redux-persist'\n\nconst isServer = typeof window === 'undefined'\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState)\n  }\n\n  // Store in global variable if client\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState)\n  }\n  return window[__NEXT_REDUX_STORE__]\n}\n\nconst wrapper = (App) => {\n  return class Redux extends React.Component {\n    static async getInitialProps (appContext) {\n      const reduxStore = getOrCreateStore()\n\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = reduxStore\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(appContext)\n      }\n\n      const currentUser = true\n      //const appProps = await App.getInitialProps(appContext);\n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        if (currentUser) {\n            console.log('called here')\n            appContext.ctx.res.writeHead(302, { Location: \"/home\" });\n            appContext.ctx.res.end();\n        }\n      }\n\n      return {\n        ...appProps,\n        initialReduxState: reduxStore.getState()\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      this.reduxStore = getOrCreateStore(props.initialReduxState)\n      this.persistor = persistStore(this.reduxStore);\n    }\n\n    render() {\n      return <App {...this.props} reduxStore={this.reduxStore} persistor={this.persistor} />\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}