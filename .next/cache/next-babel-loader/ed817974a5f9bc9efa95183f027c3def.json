{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { routeConstants, userConstants } from \"../constants\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nimport Cookies from \"universal-cookie\";\nimport Cryptr from \"cryptr\";\nimport { encrypt, decrypt } from \"../utils/crypt\";\nexport default class AuthService {\n  constructor() {\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.cookie = new Cookies();\n    this.token = null; //this.cryptr = new Cryptr(process.env.ACCESS_TOKEN_ENC_KEY || \"ty#eyrbdy8937b@Ja\")\n  }\n\n  login(email, password) {\n    // Get a token\n    return this.fetch(routeConstants.ADMIN_LOGIN, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res); // return this.fetch(`${this.domain}/api/user`, {\n      //     method: 'GET'\n      // })\n\n      return Promise.resolve(res);\n    }) // .then(res => {\n    //     this.setProfile(res)\n    //     return Promise.resolve(res)\n    // })\n    .catch(error => {\n      console.log(error);\n      return Promise.resolve(error);\n    });\n  }\n\n  loginAdmin(email, password) {\n    // Get a token\n    return this.fetch(routeConstants.ADMIN_LOGIN, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.data.token); //console.log(res)\n\n      return Promise.resolve(res);\n    });\n  }\n\n  changeAdminPassword(data, token) {\n    const {\n      password\n    } = data; // Get a token\n\n    return this.fetch(routeConstants.CHANGE_ADMIN_PASSWORD, {\n      method: 'POST',\n      body: JSON.stringify({\n        password\n      }, token)\n    }).then(res => {\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // return !!token && !isTokenExpired(token) // handwaiving here\n\n    return !!token; // handwaiving here\n  }\n\n  setProfile(profile) {\n    // Saves profile data to redux store\n    console.log(`profile is ${profile}`);\n    dispatch({\n      type: userConstants.USER_PROFILE,\n      profile\n    });\n  }\n\n  getProfile() {// Retrieves the profile data from redux state\n    //return useSelector(state => state.authentication?.profile)\n  }\n\n  async setToken(token) {\n    this.token = token;\n    const encryptedToken = encrypt(token);\n    this.cookie.set('atk', encryptedToken);\n  }\n\n  getToken() {\n    if (this.token) {\n      //console.log(\"Token available\")\n      return this.token;\n    }\n\n    const encryptedToken = this.cookie.get('atk');\n\n    if (!encryptedToken) {\n      return \"\";\n    }\n\n    const accessToken = decrypt(encryptedToken); // const accessToken = this.cryptr.decrypt(encyptedToken)\n    // console.log('At getToken, token = ' + accessToken)\n\n    return accessToken;\n  }\n\n  logout() {\n    // Clear user token and profile data from cookie\n    const cookie = new Cookies();\n    cookie.remove(\"atk\");\n  }\n\n  async _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const resp = response.json(); //var error = new Error(response.statusText)\n      //console.log(JSON.stringify(resp))\n\n      var error = new Error(resp.message);\n      error.response = resp;\n      throw error;\n    }\n  }\n\n  fetch(url, options, token = null) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }; // if (this.loggedIn()) {\n    //     headers['Authorization'] = 'Bearer ' + this.getToken()\n    // }\n\n    if (token) {\n      headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/services/AuthService.js"],"names":["routeConstants","userConstants","useSelector","useDispatch","useStore","App","store","Cookies","Cryptr","encrypt","decrypt","AuthService","constructor","fetch","bind","login","getProfile","cookie","token","email","password","ADMIN_LOGIN","method","body","JSON","stringify","then","res","setToken","Promise","resolve","catch","error","console","log","loginAdmin","data","changeAdminPassword","CHANGE_ADMIN_PASSWORD","loggedIn","getToken","setProfile","profile","dispatch","type","USER_PROFILE","encryptedToken","set","get","accessToken","logout","remove","_checkStatus","response","status","resp","json","Error","message","url","options","headers"],"mappings":"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","sourcesContent":["import {routeConstants, userConstants } from \"../constants\";\nimport {  useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nimport Cookies from \"universal-cookie\";\nimport Cryptr from \"cryptr\";\nimport { encrypt, decrypt } from \"../utils/crypt\";\nexport default class AuthService {\n    constructor() {\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n        this.cookie = new Cookies()\n        this.token = null\n        //this.cryptr = new Cryptr(process.env.ACCESS_TOKEN_ENC_KEY || \"ty#eyrbdy8937b@Ja\")\n        \n    }\n\n    login(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n        .then(res => {\n            this.setToken(res)\n            // return this.fetch(`${this.domain}/api/user`, {\n            //     method: 'GET'\n            // })\n            return Promise.resolve(res)\n        })\n        // .then(res => {\n        //     this.setProfile(res)\n        //     return Promise.resolve(res)\n        // })\n        .catch(error => {\n            console.log(error)\n            return Promise.resolve(error)\n        })\n        \n    }\n\n    loginAdmin(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.data.token)\n            //console.log(res)\n            return Promise.resolve(res)\n        })\n    }\n\n    changeAdminPassword(data, token) {\n        const {password} = data\n        // Get a token\n        return this.fetch(routeConstants.CHANGE_ADMIN_PASSWORD, {\n            method: 'POST',\n            body: JSON.stringify({\n                password\n            }, token)\n        }).then(res => {\n            return Promise.resolve(res)\n        })\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        // return !!token && !isTokenExpired(token) // handwaiving here\n        return !!token // handwaiving here\n    }\n\n    setProfile(profile) {\n        // Saves profile data to redux store\n        console.log(`profile is ${profile}`)\n        dispatch({type: userConstants.USER_PROFILE, profile})\n    }\n\n    getProfile() {\n        // Retrieves the profile data from redux state\n        //return useSelector(state => state.authentication?.profile)\n    }\n\n    async setToken(token) {\n        \n        this.token = token\n        const encryptedToken = encrypt(token)\n        this.cookie.set('atk', encryptedToken)\n    }\n\n    getToken() {\n\n        if (this.token){\n            //console.log(\"Token available\")\n            return this.token\n        }\n        \n        const encryptedToken = this.cookie.get('atk')\n        if(!encryptedToken){\n            return \"\"\n        }\n\n        const accessToken = decrypt(encryptedToken)\n\n\n        // const accessToken = this.cryptr.decrypt(encyptedToken)\n        // console.log('At getToken, token = ' + accessToken)\n        return accessToken\n    }\n\n    logout() {\n        // Clear user token and profile data from cookie\n\n        const cookie = new Cookies();\n        cookie.remove(\"atk\");\n\n        \n\n    }\n\n    async _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n\n            const resp = response.json()\n            //var error = new Error(response.statusText)\n            //console.log(JSON.stringify(resp))\n            var error = new Error(resp.message)\n            error.response = resp\n           \n            throw error\n        }\n    }\n\n    fetch(url, options, token=null) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        // if (this.loggedIn()) {\n        //     headers['Authorization'] = 'Bearer ' + this.getToken()\n        // }\n\n        if (token) {\n                headers['Authorization'] = 'Bearer ' + token\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}