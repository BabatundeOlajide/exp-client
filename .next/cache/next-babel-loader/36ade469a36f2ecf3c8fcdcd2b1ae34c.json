{"ast":null,"code":"import { userConstants } from '../constants';\nimport AuthService from '../services/AuthService'; // import { alertActions } from './';\n\nimport Router from 'next/router';\nexport const authActions = {\n  cleanState,\n  login,\n  changePassword,\n  logout,\n  loggedIn,\n  register,\n  delete: _delete\n};\nconst auth = new AuthService();\n\nfunction login(email, password) {\n  return (dispatch, getState) => {\n    dispatch(request({\n      email\n    }));\n    auth.loginAdmin(email, password).then(result => {\n      const payload = result.data;\n      dispatch(success(payload));\n      Router.replace('/home');\n    }, error => {\n      //console.log(error.toString())\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(payload) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      payload\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction changePassword(password) {\n  return (dispatch, getState) => {\n    //dispatch(request({ email }));\n    const {\n      token\n    } = getState().authentication; //console.log('Lo in user action ' + token)\n\n    auth.changeAdminPassword({\n      password\n    }, token).then(result => {\n      dispatch(success());\n    }, error => {\n      //console.log(error.toString())\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.PASSWORD_CHANGE_REQUEST\n    };\n  }\n\n  function success() {\n    return {\n      type: userConstants.PASSWORD_CHANGE_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.PASSWORD_CHANGE_FAILURE,\n      error\n    };\n  }\n}\n\nfunction loggedIn() {\n  return dispatch => {\n    dispatch(request());\n    dispatch(success(auth.loggedIn()));\n  };\n\n  function request() {\n    return {\n      type: userConstants.TOKEN_REQUEST\n    };\n  }\n\n  function success(status) {\n    return {\n      type: userConstants.TOKEN_SUCCESS,\n      status\n    };\n  }\n}\n\nfunction logout() {\n  return dispatch => {\n    auth.logout(); //dispatch(success())\n\n    Router.replace('/');\n  };\n\n  function success() {\n    return {\n      type: userConstants.LOGOUT\n    };\n  }\n}\n\nfunction cleanState() {\n  return dispatch => {\n    dispatch(success());\n  };\n\n  function success() {\n    return {\n      type: userConstants.LOGOUT\n    };\n  }\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    auth.register(user).then(user => {\n      dispatch(success());\n      Router.push('/login'); // dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n    auth.delete(id).then(user => dispatch(success(id)), error => dispatch(failure(id, error.toString())));\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/actions/auth.actions.js"],"names":["userConstants","AuthService","Router","authActions","cleanState","login","changePassword","logout","loggedIn","register","delete","_delete","auth","email","password","dispatch","getState","request","loginAdmin","then","result","payload","data","success","replace","error","failure","toString","user","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","token","authentication","changeAdminPassword","PASSWORD_CHANGE_REQUEST","PASSWORD_CHANGE_SUCCESS","PASSWORD_CHANGE_FAILURE","TOKEN_REQUEST","status","TOKEN_SUCCESS","LOGOUT","push","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,UADuB;AAEvBC,EAAAA,KAFuB;AAGvBC,EAAAA,cAHuB;AAIvBC,EAAAA,MAJuB;AAKvBC,EAAAA,QALuB;AAMvBC,EAAAA,QANuB;AAQvBC,EAAAA,MAAM,EAAEC;AARe,CAApB;AAWP,MAAMC,IAAI,GAAG,IAAIX,WAAJ,EAAb;;AAIA,SAASI,KAAT,CAAeQ,KAAf,EAAsBC,QAAtB,EAAgC;AAC5B,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAACE,OAAO,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAR,CAAR;AAEAD,IAAAA,IAAI,CAACM,UAAL,CAAgBL,KAAhB,EAAuBC,QAAvB,EACKK,IADL,CAEQC,MAAM,IAAI;AACN,YAAMC,OAAO,GAAGD,MAAM,CAACE,IAAvB;AACAP,MAAAA,QAAQ,CAACQ,OAAO,CAACF,OAAD,CAAR,CAAR;AACAnB,MAAAA,MAAM,CAACsB,OAAP,CAAe,OAAf;AACH,KANT,EAOQC,KAAK,IAAI;AACL;AACAV,MAAAA,QAAQ,CAACW,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AAEH,KAXT;AAaH,GAhBD;;AAmBA,WAASV,OAAT,CAAiBW,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAE7B,aAAa,CAAC8B,aAAtB;AAAqCF,MAAAA;AAArC,KAAP;AAAoD;;AAC7E,WAASL,OAAT,CAAiBF,OAAjB,EAA0B;AAAE,WAAO;AAAEQ,MAAAA,IAAI,EAAE7B,aAAa,CAAC+B,aAAtB;AAAqCV,MAAAA;AAArC,KAAP;AAAuD;;AACnF,WAASK,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAE7B,aAAa,CAACgC,aAAtB;AAAqCP,MAAAA;AAArC,KAAP;AAAqD;AAWlF;;AAED,SAASnB,cAAT,CAAwBQ,QAAxB,EAAkC;AAC9B,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3B;AACA,UAAM;AAACiB,MAAAA;AAAD,QAAUjB,QAAQ,GAAGkB,cAA3B,CAF2B,CAG3B;;AACAtB,IAAAA,IAAI,CAACuB,mBAAL,CAAyB;AAACrB,MAAAA;AAAD,KAAzB,EAAqCmB,KAArC,EACKd,IADL,CAEQC,MAAM,IAAI;AACNL,MAAAA,QAAQ,CAACQ,OAAO,EAAR,CAAR;AACH,KAJT,EAKQE,KAAK,IAAI;AACL;AACAV,MAAAA,QAAQ,CAACW,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AAEH,KATT;AAWH,GAfD;;AAkBA,WAASV,OAAT,GAAmB;AAAE,WAAO;AAAEY,MAAAA,IAAI,EAAE7B,aAAa,CAACoC;AAAtB,KAAP;AAAwD;;AAC7E,WAASb,OAAT,GAAmB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAE7B,aAAa,CAACqC;AAAtB,KAAP;AAAwD;;AAC7E,WAASX,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAE7B,aAAa,CAACsC,uBAAtB;AAA+Cb,MAAAA;AAA/C,KAAP;AAA+D;AAI5F;;AAED,SAASjB,QAAT,GAAoB;AAChB,SAAOO,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACE,OAAO,EAAR,CAAR;AACAF,IAAAA,QAAQ,CAACQ,OAAO,CAACX,IAAI,CAACJ,QAAL,EAAD,CAAR,CAAR;AACH,GAHD;;AAIA,WAASS,OAAT,GAAmB;AAAE,WAAO;AAAEY,MAAAA,IAAI,EAAE7B,aAAa,CAACuC;AAAtB,KAAP;AAA8C;;AACnE,WAAShB,OAAT,CAAiBiB,MAAjB,EAAyB;AAAE,WAAO;AAAEX,MAAAA,IAAI,EAAE7B,aAAa,CAACyC,aAAtB;AAAqCD,MAAAA;AAArC,KAAP;AAAsD;AACpF;;AAID,SAASjC,MAAT,GAAkB;AACd,SAAOQ,QAAQ,IAAI;AAEfH,IAAAA,IAAI,CAACL,MAAL,GAFe,CAGf;;AAEAL,IAAAA,MAAM,CAACsB,OAAP,CAAe,GAAf;AAEH,GAPD;;AASA,WAASD,OAAT,GAAmB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAE7B,aAAa,CAAC0C;AAAtB,KAAP;AAAuC;AAC/D;;AAGD,SAAStC,UAAT,GAAsB;AAClB,SAAOW,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACQ,OAAO,EAAR,CAAR;AAEH,GAJD;;AAMA,WAASA,OAAT,GAAmB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAE7B,aAAa,CAAC0C;AAAtB,KAAP;AAAuC;AAC/D;;AAED,SAASjC,QAAT,CAAkBmB,IAAlB,EAAwB;AACpB,SAAOb,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACE,OAAO,CAACW,IAAD,CAAR,CAAR;AAEAhB,IAAAA,IAAI,CAACH,QAAL,CAAcmB,IAAd,EACKT,IADL,CAEQS,IAAI,IAAI;AACJb,MAAAA,QAAQ,CAACQ,OAAO,EAAR,CAAR;AACArB,MAAAA,MAAM,CAACyC,IAAP,CAAY,QAAZ,EAFI,CAGJ;AACH,KANT,EAOQlB,KAAK,IAAI;AACLV,MAAAA,QAAQ,CAACW,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR,CADK,CAEL;AACH,KAVT;AAYH,GAfD;;AAiBA,WAASV,OAAT,CAAiBW,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAE7B,aAAa,CAAC4C,gBAAtB;AAAwChB,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASL,OAAT,CAAiBK,IAAjB,EAAuB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAE7B,aAAa,CAAC6C,gBAAtB;AAAwCjB,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASF,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAE7B,aAAa,CAAC8C,gBAAtB;AAAwCrB,MAAAA;AAAxC,KAAP;AAAwD;AACrF,C,CAGD;;;AACA,SAASd,OAAT,CAAiBoC,EAAjB,EAAqB;AACjB,SAAOhC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACE,OAAO,CAAC8B,EAAD,CAAR,CAAR;AAEAnC,IAAAA,IAAI,CAACF,MAAL,CAAYqC,EAAZ,EACK5B,IADL,CAEQS,IAAI,IAAIb,QAAQ,CAACQ,OAAO,CAACwB,EAAD,CAAR,CAFxB,EAGQtB,KAAK,IAAIV,QAAQ,CAACW,OAAO,CAACqB,EAAD,EAAKtB,KAAK,CAACE,QAAN,EAAL,CAAR,CAHzB;AAKH,GARD;;AAUA,WAASV,OAAT,CAAiB8B,EAAjB,EAAqB;AAAE,WAAO;AAAElB,MAAAA,IAAI,EAAE7B,aAAa,CAACgD,cAAtB;AAAsCD,MAAAA;AAAtC,KAAP;AAAmD;;AAC1E,WAASxB,OAAT,CAAiBwB,EAAjB,EAAqB;AAAE,WAAO;AAAElB,MAAAA,IAAI,EAAE7B,aAAa,CAACiD,cAAtB;AAAsCF,MAAAA;AAAtC,KAAP;AAAmD;;AAC1E,WAASrB,OAAT,CAAiBqB,EAAjB,EAAqBtB,KAArB,EAA4B;AAAE,WAAO;AAAEI,MAAAA,IAAI,EAAE7B,aAAa,CAACkD,cAAtB;AAAsCH,MAAAA,EAAtC;AAA0CtB,MAAAA;AAA1C,KAAP;AAA0D;AAC3F","sourcesContent":["import { userConstants } from '../constants';\nimport AuthService from '../services/AuthService';\n// import { alertActions } from './';\nimport Router from 'next/router';\n\nexport const authActions = {\n    cleanState,\n    login,\n    changePassword,\n    logout,\n    loggedIn,\n    register,\n    \n    delete: _delete\n};\n\nconst auth = new AuthService()\n\n\n\nfunction login(email, password) {\n    return (dispatch, getState) => {\n        dispatch(request({ email }));\n\n        auth.loginAdmin(email, password)\n            .then(\n                result => { \n                    const payload = result.data\n                    dispatch(success(payload));\n                    Router.replace('/home');\n                },\n                error => {\n                    //console.log(error.toString())\n                    dispatch(failure(error.toString()));\n                    \n                }\n            );\n    };\n\n    \n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(payload) { return { type: userConstants.LOGIN_SUCCESS, payload } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n\n\n\n\n\n\n\n\n\n\n}\n\nfunction changePassword(password) {\n    return (dispatch, getState) => {\n        //dispatch(request({ email }));\n        const {token} = getState().authentication;\n        //console.log('Lo in user action ' + token)\n        auth.changeAdminPassword({password}, token)\n            .then(\n                result => { \n                    dispatch(success());\n                },\n                error => {\n                    //console.log(error.toString())\n                    dispatch(failure(error.toString()));\n                    \n                }\n            );\n    };\n\n    \n    function request() { return { type: userConstants.PASSWORD_CHANGE_REQUEST } }\n    function success() { return { type: userConstants.PASSWORD_CHANGE_SUCCESS } }\n    function failure(error) { return { type: userConstants.PASSWORD_CHANGE_FAILURE, error } }\n\n\n\n}\n\nfunction loggedIn() {\n    return dispatch => {\n        dispatch(request());\n        dispatch(success(auth.loggedIn()));\n    };\n    function request() { return { type: userConstants.TOKEN_REQUEST } }\n    function success(status) { return { type: userConstants.TOKEN_SUCCESS, status } }\n}\n\n\n\nfunction logout() {\n    return dispatch => {\n\n        auth.logout()\n        //dispatch(success())\n\n        Router.replace('/');\n           \n    };\n\n    function success() { return { type: userConstants.LOGOUT } }\n}\n\n\nfunction cleanState() {\n    return dispatch => {\n\n        dispatch(success())\n           \n    };\n\n    function success() { return { type: userConstants.LOGOUT } }\n}\n\nfunction register(user) {\n    return dispatch => {\n        dispatch(request(user));\n\n        auth.register(user)\n            .then(\n                user => { \n                    dispatch(success());\n                    Router.push('/login');\n                    // dispatch(alertActions.success('Registration successful'));\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    // dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    return dispatch => {\n        dispatch(request(id));\n\n        auth.delete(id)\n            .then(\n                user => dispatch(success(id)),\n                error => dispatch(failure(id, error.toString()))\n            );\n    };\n\n    function request(id) { return { type: userConstants.DELETE_REQUEST, id } }\n    function success(id) { return { type: userConstants.DELETE_SUCCESS, id } }\n    function failure(id, error) { return { type: userConstants.DELETE_FAILURE, id, error } }\n}"]},"metadata":{},"sourceType":"module"}