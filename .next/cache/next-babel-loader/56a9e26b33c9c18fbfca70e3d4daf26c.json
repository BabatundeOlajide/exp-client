{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { routeConstants, userConstants } from \"../constants\";\nexport default class UserService {\n  constructor() {\n    _defineProperty(this, \"uploadReport\", void 0);\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  addUser(data, token) {\n    return this.fetch(routeConstants.ADD_USER, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }, token).then(res => {\n      return Promise.resolve(res);\n    });\n  }\n\n  uploadReport(data, token) {\n    return this.fetch(routeConstants.U, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }, token).then(res => {\n      return Promise.resolve(res);\n    });\n  }\n\n  getAllUser(token) {\n    return this.fetch(routeConstants.ALL_USER, {\n      method: 'GET'\n    }, token).then(res => {\n      //console.log(JSON.stringify(res))\n      return Promise.resolve(res);\n    });\n  }\n\n  async _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const resp = await response.json(); //var error = new Error(response.statusText)\n\n      var error = new Error(resp.message);\n      error.response = resp;\n      throw error;\n    }\n  }\n\n  fetch(url, options, token = null) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }; // if (this.loggedIn()) {\n    //     headers['Authorization'] = 'Bearer ' + this.getToken()\n    // }\n\n    if (token) {\n      headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/services/UserService.js"],"names":["routeConstants","userConstants","UserService","constructor","fetch","bind","addUser","data","token","ADD_USER","method","body","JSON","stringify","then","res","Promise","resolve","uploadReport","U","getAllUser","ALL_USER","_checkStatus","response","status","resp","json","error","Error","message","url","options","headers"],"mappings":";;;;;;AAAA,SAAQA,cAAR,EAAwBC,aAAxB,QAA6C,cAA7C;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,GAAG;AAAA;;AACV,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACH;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAOC,KAAP,EAAc;AACjB,WAAO,KAAKJ,KAAL,CAAWJ,cAAc,CAACS,QAA1B,EAAoC;AACvCC,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAFiC,KAApC,EAIPC,KAJO,EAKLM,IALK,CAKAC,GAAG,IAAI;AACV,aAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAP;AACH,KAPM,CAAP;AAQH;;AAEDG,EAAAA,YAAY,CAACX,IAAD,EAAOC,KAAP,EAAc;AACtB,WAAO,KAAKJ,KAAL,CAAWJ,cAAc,CAACmB,CAA1B,EAA6B;AAChCT,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAF0B,KAA7B,EAIPC,KAJO,EAKLM,IALK,CAKAC,GAAG,IAAI;AACV,aAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAP;AACH,KAPM,CAAP;AAQH;;AAIDK,EAAAA,UAAU,CAACZ,KAAD,EAAQ;AACd,WAAO,KAAKJ,KAAL,CAAWJ,cAAc,CAACqB,QAA1B,EAAoC;AACvCX,MAAAA,MAAM,EAAE;AAD+B,KAApC,EAGPF,KAHO,EAILM,IAJK,CAIAC,GAAG,IAAI;AACV;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAP;AACH,KAPM,CAAP;AAQH;;AAGD,QAAMO,YAAN,CAAmBC,QAAnB,EAA6B;AACzB;AACA,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,aAAOD,QAAP;AACH,KAFD,MAEO;AAEH,YAAME,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFG,CAGH;;AACA,UAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAZ;AACAF,MAAAA,KAAK,CAACJ,QAAN,GAAiBE,IAAjB;AAEA,YAAME,KAAN;AACH;AACJ;;AAEDvB,EAAAA,KAAK,CAAC0B,GAAD,EAAMC,OAAN,EAAevB,KAAK,GAAC,IAArB,EAA2B;AAC5B;AACA,UAAMwB,OAAO,GAAG;AACZ,gBAAU,kBADE;AAEZ,sBAAgB;AAFJ,KAAhB,CAF4B,CAO5B;AACA;AACA;;AAEA,QAAIxB,KAAJ,EAAW;AACHwB,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAYxB,KAAvC;AACP;;AAED,WAAOJ,KAAK,CAAC0B,GAAD;AACJE,MAAAA;AADI,OAEDD,OAFC,EAAL,CAIFjB,IAJE,CAIG,KAAKQ,YAJR,EAKFR,IALE,CAKGS,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EALf,CAAP;AAMH;;AA7E4B","sourcesContent":["import {routeConstants, userConstants } from \"../constants\";\n\nexport default class UserService {\n    constructor() {\n        this.fetch = this.fetch.bind(this)\n    }\n\n    addUser(data, token) {\n        return this.fetch(routeConstants.ADD_USER, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        },\n        token\n        ).then(res => {\n            return Promise.resolve(res)\n        })\n    }\n\n    uploadReport(data, token) {\n        return this.fetch(routeConstants.U, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        },\n        token\n        ).then(res => {\n            return Promise.resolve(res)\n        })\n    }\n\n    uploadReport\n\n    getAllUser(token) {\n        return this.fetch(routeConstants.ALL_USER, {\n            method: 'GET',\n        },\n        token\n        ).then(res => {\n            //console.log(JSON.stringify(res))\n            return Promise.resolve(res)\n        })\n    }\n\n\n    async _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n\n            const resp = await response.json()\n            //var error = new Error(response.statusText)\n            var error = new Error(resp.message)\n            error.response = resp\n           \n            throw error\n        }\n    }\n\n    fetch(url, options, token=null) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        // if (this.loggedIn()) {\n        //     headers['Authorization'] = 'Bearer ' + this.getToken()\n        // }\n\n        if (token) {\n                headers['Authorization'] = 'Bearer ' + token\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}