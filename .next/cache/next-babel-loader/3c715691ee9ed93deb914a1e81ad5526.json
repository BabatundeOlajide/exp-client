{"ast":null,"code":"import crypto from \"crypto\";\nconst algorithm = 'aes-256-ctr';\nconst secretKey = 'vOJKVH6sdmpNWjRRIqCc7rdxs01lwHzf';\nconst iv = crypto.randomBytes(16);\n\nconst encrypt = text => {\n  const cipher = crypto.createCipheriv(algorithm, secretKey, iv);\n  const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);\n  return {\n    iv: iv.toString('hex'),\n    content: encrypted.toString('hex')\n  };\n};\n\nconst decrypt = hash => {\n  const decipher = crypto.createDecipheriv(algorithm, secretKey, Buffer.from(hash.iv, 'hex'));\n  const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]);\n  return decrpyted.toString();\n};\n\nexport { encrypt, decrypt };","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/utils/crypt.js"],"names":["crypto","algorithm","secretKey","iv","randomBytes","encrypt","text","cipher","createCipheriv","encrypted","Buffer","concat","update","final","toString","content","decrypt","hash","decipher","createDecipheriv","from","decrpyted"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,MAAMC,SAAS,GAAG,aAAlB;AACA,MAAMC,SAAS,GAAG,kCAAlB;AACA,MAAMC,EAAE,GAAGH,MAAM,CAACI,WAAP,CAAmB,EAAnB,CAAX;;AAEA,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAEtB,QAAMC,MAAM,GAAGP,MAAM,CAACQ,cAAP,CAAsBP,SAAtB,EAAiCC,SAAjC,EAA4CC,EAA5C,CAAf;AAEA,QAAMM,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,CAACJ,MAAM,CAACK,MAAP,CAAcN,IAAd,CAAD,EAAsBC,MAAM,CAACM,KAAP,EAAtB,CAAd,CAAlB;AAEA,SAAO;AACHV,IAAAA,EAAE,EAAEA,EAAE,CAACW,QAAH,CAAY,KAAZ,CADD;AAEHC,IAAAA,OAAO,EAAEN,SAAS,CAACK,QAAV,CAAmB,KAAnB;AAFN,GAAP;AAIH,CAVD;;AAYA,MAAME,OAAO,GAAIC,IAAD,IAAU;AAEtB,QAAMC,QAAQ,GAAGlB,MAAM,CAACmB,gBAAP,CAAwBlB,SAAxB,EAAmCC,SAAnC,EAA8CQ,MAAM,CAACU,IAAP,CAAYH,IAAI,CAACd,EAAjB,EAAqB,KAArB,CAA9C,CAAjB;AAEA,QAAMkB,SAAS,GAAGX,MAAM,CAACC,MAAP,CAAc,CAACO,QAAQ,CAACN,MAAT,CAAgBF,MAAM,CAACU,IAAP,CAAYH,IAAI,CAACF,OAAjB,EAA0B,KAA1B,CAAhB,CAAD,EAAoDG,QAAQ,CAACL,KAAT,EAApD,CAAd,CAAlB;AAEA,SAAOQ,SAAS,CAACP,QAAV,EAAP;AACH,CAPD;;AASA,SACIT,OADJ,EAEIW,OAFJ","sourcesContent":["import crypto from \"crypto\";\n\nconst algorithm = 'aes-256-ctr';\nconst secretKey = 'vOJKVH6sdmpNWjRRIqCc7rdxs01lwHzf';\nconst iv = crypto.randomBytes(16);\n\nconst encrypt = (text) => {\n\n    const cipher = crypto.createCipheriv(algorithm, secretKey, iv);\n\n    const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);\n\n    return {\n        iv: iv.toString('hex'),\n        content: encrypted.toString('hex')\n    };\n};\n\nconst decrypt = (hash) => {\n\n    const decipher = crypto.createDecipheriv(algorithm, secretKey, Buffer.from(hash.iv, 'hex'));\n\n    const decrpyted = Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]);\n\n    return decrpyted.toString();\n};\n\nexport {\n    encrypt,\n    decrypt\n};"]},"metadata":{},"sourceType":"module"}