{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../constants\";\nexport default class AuthService {\n  constructor() {\n    //this.domain = domain || 'http://localhost:4000'\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email, password) {\n    // Get a token\n    return this.fetch(`${this.domain}/api/token`, {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res);\n      return this.fetch(`${this.domain}/api/user`, {\n        method: 'GET'\n      });\n    }).then(res => {\n      this.setProfile(res);\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // return !!token && !isTokenExpired(token) // handwaiving here\n\n    return !!token; // handwaiving here\n  }\n\n  setProfile(profile) {\n    // Saves profile data to localStorage\n    localStorage.setItem('profile', JSON.stringify(profile));\n  }\n\n  getProfile() {\n    // Retrieves the profile data from localStorage\n    const profile = localStorage.getItem('profile');\n    return profile ? JSON.parse(localStorage.profile) : {};\n  }\n\n  setToken(tokenResponse) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', tokenResponse.accessToken);\n    localStorage.setItem('token', tokenResponse.token);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('profile');\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n  fetch(url, options) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer ' + this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/utils/AuthService.js"],"names":["AuthService","constructor","fetch","bind","login","getProfile","email","password","domain","method","body","JSON","stringify","then","res","setToken","setProfile","Promise","resolve","loggedIn","token","getToken","profile","localStorage","setItem","getItem","parse","tokenResponse","accessToken","logout","removeItem","_checkStatus","response","status","error","Error","statusText","url","options","headers","json"],"mappings":"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","sourcesContent":["import { } from \"../constants\";\nexport default class AuthService {\n    constructor() {\n        //this.domain = domain || 'http://localhost:4000'\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    login(email, password) {\n        // Get a token\n        return this.fetch(`${this.domain}/api/token`, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        }).then(res => {\n            this.setToken(res)\n            return this.fetch(`${this.domain}/api/user`, {\n                method: 'GET'\n            })\n        }).then(res => {\n            this.setProfile(res)\n            return Promise.resolve(res)\n        })\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        // return !!token && !isTokenExpired(token) // handwaiving here\n        return !!token // handwaiving here\n    }\n\n    setProfile(profile) {\n        // Saves profile data to localStorage\n        localStorage.setItem('profile', JSON.stringify(profile))\n    }\n\n    getProfile() {\n        // Retrieves the profile data from localStorage\n        const profile = localStorage.getItem('profile')\n        return profile ? JSON.parse(localStorage.profile) : {}\n    }\n\n    setToken(tokenResponse) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', tokenResponse.accessToken)\n        localStorage.setItem('token', tokenResponse.token)\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        localStorage.removeItem('profile');\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}