{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { routeConstants, userConstants } from \"../constants\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(email, password) {\n      var _this = this;\n\n      // Get a token\n      return this.fetch(routeConstants.ADMIN_LOGIN, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      }).then(function (res) {\n        _this.setToken(res); // return this.fetch(`${this.domain}/api/user`, {\n        //     method: 'GET'\n        // })\n\n\n        return Promise.resolve(res);\n      }) // .then(res => {\n      //     this.setProfile(res)\n      //     return Promise.resolve(res)\n      // })\n      [\"catch\"](function (error) {\n        console.log(error);\n        return Promise.resolve(error);\n      });\n    }\n  }, {\n    key: \"loginAdmin\",\n    value: function loginAdmin(email, password) {\n      var _this2 = this;\n\n      // Get a token\n      return this.fetch(routeConstants.ADMIN_LOGIN, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      }).then(function (res) {\n        _this2.setToken(res.accessToken);\n\n        return _this2.fetch(\"\".concat(_this2.domain, \"/api/user\"), {\n          method: 'GET'\n        });\n      }).then(function (res) {\n        _this2.setProfile(res.profile);\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // return !!token && !isTokenExpired(token) // handwaiving here\n\n      return !!token; // handwaiving here\n    }\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(profile) {\n      // Saves profile data to redux store\n      dispatch({\n        type: userConstants.USER_PROFILE,\n        profile: profile\n      });\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Retrieves the profile data from redux state\n      return useSelector(function (state) {\n        var _state$authentication;\n\n        return (_state$authentication = state.authentication) === null || _state$authentication === void 0 ? void 0 : _state$authentication.profile;\n      });\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(accessToken) {\n      var dispatch = useDispatch();\n      dispatch({\n        type: userConstants.ACCESS_TOKEN,\n        accessToken: accessToken\n      });\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var _state$authentication2;\n\n      var state = store.getState(); //return useSelector(state => state.authentication?.accessToken)\n\n      return (_state$authentication2 = state.authentication) === null || _state$authentication2 === void 0 ? void 0 : _state$authentication2.accessToken;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('profile');\n    }\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/services/AuthService.js"],"names":["routeConstants","userConstants","useSelector","useDispatch","useStore","App","store","AuthService","fetch","bind","login","getProfile","email","password","ADMIN_LOGIN","method","body","JSON","stringify","then","res","setToken","Promise","resolve","error","console","log","accessToken","domain","setProfile","profile","token","getToken","dispatch","type","USER_PROFILE","state","authentication","ACCESS_TOKEN","getState","localStorage","removeItem","response","status","Error","statusText","url","options","headers","loggedIn","_checkStatus","json"],"mappings":"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","sourcesContent":["import {routeConstants, userConstants } from \"../constants\";\nimport {  useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nexport default class AuthService {\n    constructor() {\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n        \n    }\n\n    login(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n        .then(res => {\n            this.setToken(res)\n            // return this.fetch(`${this.domain}/api/user`, {\n            //     method: 'GET'\n            // })\n            return Promise.resolve(res)\n        })\n        // .then(res => {\n        //     this.setProfile(res)\n        //     return Promise.resolve(res)\n        // })\n        .catch(error => {\n            console.log(error)\n            return Promise.resolve(error)\n        })\n        \n    }\n\n    loginAdmin(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.accessToken)\n            return this.fetch(`${this.domain}/api/user`, {\n                method: 'GET'\n            })\n        }).then(res => {\n            this.setProfile(res.profile)\n            return Promise.resolve(res)\n        })\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        // return !!token && !isTokenExpired(token) // handwaiving here\n        return !!token // handwaiving here\n    }\n\n    setProfile(profile) {\n        // Saves profile data to redux store\n        dispatch({type: userConstants.USER_PROFILE, profile})\n    }\n\n    getProfile() {\n        // Retrieves the profile data from redux state\n        return useSelector(state => state.authentication?.profile)\n    }\n\n    setToken(accessToken) {\n        \n        const dispatch = useDispatch();\n        dispatch({type: userConstants.ACCESS_TOKEN, accessToken})\n\n    }\n\n    getToken() {\n        const state = store.getState();\n        //return useSelector(state => state.authentication?.accessToken)\n        return state.authentication?.accessToken\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        localStorage.removeItem('profile');\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}