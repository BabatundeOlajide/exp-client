{"ast":null,"code":"import { userConstants } from '../constants';\nimport AuthService from '../services/AuthService'; // import { alertActions } from './';\n\nimport Router from 'next/router';\nexport const userActions = {\n  login,\n  logout,\n  loggedIn,\n  register,\n  getAll,\n  defaultUser,\n  setAccessToken,\n  delete: _delete\n};\nconst auth = new AuthService();\n\nfunction defaultUser(name, email) {\n  const currentUser = {\n    name,\n    email\n  };\n  return {\n    type: userConstants.DEFAULT_USER,\n    currentUser\n  };\n}\n\nfunction setAccessToken(token) {\n  return {\n    type: userConstants.ACCESS_TOKEN,\n    token\n  };\n}\n\nfunction login(email, password) {\n  //console.log(\"Called Me!\")\n  return dispatch => {\n    dispatch(request({\n      email\n    }));\n    auth.login(email, password).then(user => {\n      con;\n      dispatch(success(user));\n      Router.push('/home');\n    }, error => {\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction loggedIn() {\n  return dispatch => {\n    dispatch(request());\n    dispatch(success(auth.loggedIn()));\n  };\n\n  function request() {\n    return {\n      type: userConstants.TOKEN_REQUEST\n    };\n  }\n\n  function success(status) {\n    return {\n      type: userConstants.TOKEN_SUCCESS,\n      status\n    };\n  }\n}\n\nfunction logout() {\n  auth.logout();\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    auth.register(user).then(user => {\n      dispatch(success());\n      Router.push('/login'); // dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAll() {\n  return dispatch => {\n    dispatch(request());\n    auth.getAll().then(users => dispatch(success(users)), error => dispatch(failure(error.toString())));\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error\n    };\n  }\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n    auth.delete(id).then(user => dispatch(success(id)), error => dispatch(failure(id, error.toString())));\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/actions/user.actions.js"],"names":["userConstants","AuthService","Router","userActions","login","logout","loggedIn","register","getAll","defaultUser","setAccessToken","delete","_delete","auth","name","email","currentUser","type","DEFAULT_USER","token","ACCESS_TOKEN","password","dispatch","request","then","user","con","success","push","error","failure","toString","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","TOKEN_REQUEST","status","TOKEN_SUCCESS","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","users","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA,QAHuB;AAIvBC,EAAAA,QAJuB;AAKvBC,EAAAA,MALuB;AAMvBC,EAAAA,WANuB;AAOvBC,EAAAA,cAPuB;AAQvBC,EAAAA,MAAM,EAAEC;AARe,CAApB;AAWP,MAAMC,IAAI,GAAG,IAAIZ,WAAJ,EAAb;;AAEA,SAASQ,WAAT,CAAqBK,IAArB,EAA2BC,KAA3B,EAAiC;AAC7B,QAAMC,WAAW,GAAG;AAACF,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAApB;AACA,SAAO;AAACE,IAAAA,IAAI,EAAEjB,aAAa,CAACkB,YAArB;AAAmCF,IAAAA;AAAnC,GAAP;AACH;;AAED,SAASN,cAAT,CAAwBS,KAAxB,EAA8B;AAC1B,SAAO;AAACF,IAAAA,IAAI,EAAEjB,aAAa,CAACoB,YAArB;AAAmCD,IAAAA;AAAnC,GAAP;AACH;;AAED,SAASf,KAAT,CAAeW,KAAf,EAAsBM,QAAtB,EAAgC;AAC5B;AACA,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAER,MAAAA;AAAF,KAAD,CAAR,CAAR;AAEAF,IAAAA,IAAI,CAACT,KAAL,CAAWW,KAAX,EAAkBM,QAAlB,EACKG,IADL,CAEQC,IAAI,IAAI;AACJC,MAAAA,GAAG;AACHJ,MAAAA,QAAQ,CAACK,OAAO,CAACF,IAAD,CAAR,CAAR;AACAvB,MAAAA,MAAM,CAAC0B,IAAP,CAAY,OAAZ;AACH,KANT,EAOQC,KAAK,IAAI;AACLP,MAAAA,QAAQ,CAACQ,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR,CADK,CAEL;AACH,KAVT;AAYH,GAfD;;AAiBA,WAASR,OAAT,CAAiBE,IAAjB,EAAuB;AAAE,WAAO;AAAER,MAAAA,IAAI,EAAEjB,aAAa,CAACgC,aAAtB;AAAqCP,MAAAA;AAArC,KAAP;AAAoD;;AAC7E,WAASE,OAAT,CAAiBF,IAAjB,EAAuB;AAAE,WAAO;AAAER,MAAAA,IAAI,EAAEjB,aAAa,CAACiC,aAAtB;AAAqCR,MAAAA;AAArC,KAAP;AAAoD;;AAC7E,WAASK,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEZ,MAAAA,IAAI,EAAEjB,aAAa,CAACkC,aAAtB;AAAqCL,MAAAA;AAArC,KAAP;AAAqD;AAClF;;AAED,SAASvB,QAAT,GAAoB;AAChB,SAAOgB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AACAD,IAAAA,QAAQ,CAACK,OAAO,CAACd,IAAI,CAACP,QAAL,EAAD,CAAR,CAAR;AACH,GAHD;;AAIA,WAASiB,OAAT,GAAmB;AAAE,WAAO;AAAEN,MAAAA,IAAI,EAAEjB,aAAa,CAACmC;AAAtB,KAAP;AAA8C;;AACnE,WAASR,OAAT,CAAiBS,MAAjB,EAAyB;AAAE,WAAO;AAAEnB,MAAAA,IAAI,EAAEjB,aAAa,CAACqC,aAAtB;AAAqCD,MAAAA;AAArC,KAAP;AAAsD;AACpF;;AAED,SAAS/B,MAAT,GAAkB;AACdQ,EAAAA,IAAI,CAACR,MAAL;AACA,SAAO;AAAEY,IAAAA,IAAI,EAAEjB,aAAa,CAACsC;AAAtB,GAAP;AACH;;AAED,SAAS/B,QAAT,CAAkBkB,IAAlB,EAAwB;AACpB,SAAOH,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAACE,IAAD,CAAR,CAAR;AAEAZ,IAAAA,IAAI,CAACN,QAAL,CAAckB,IAAd,EACKD,IADL,CAEQC,IAAI,IAAI;AACJH,MAAAA,QAAQ,CAACK,OAAO,EAAR,CAAR;AACAzB,MAAAA,MAAM,CAAC0B,IAAP,CAAY,QAAZ,EAFI,CAGJ;AACH,KANT,EAOQC,KAAK,IAAI;AACLP,MAAAA,QAAQ,CAACQ,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR,CADK,CAEL;AACH,KAVT;AAYH,GAfD;;AAiBA,WAASR,OAAT,CAAiBE,IAAjB,EAAuB;AAAE,WAAO;AAAER,MAAAA,IAAI,EAAEjB,aAAa,CAACuC,gBAAtB;AAAwCd,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASE,OAAT,CAAiBF,IAAjB,EAAuB;AAAE,WAAO;AAAER,MAAAA,IAAI,EAAEjB,aAAa,CAACwC,gBAAtB;AAAwCf,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASK,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEZ,MAAAA,IAAI,EAAEjB,aAAa,CAACyC,gBAAtB;AAAwCZ,MAAAA;AAAxC,KAAP;AAAwD;AACrF;;AAED,SAASrB,MAAT,GAAkB;AACd,SAAOc,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AAEAV,IAAAA,IAAI,CAACL,MAAL,GACKgB,IADL,CAEQkB,KAAK,IAAIpB,QAAQ,CAACK,OAAO,CAACe,KAAD,CAAR,CAFzB,EAGQb,KAAK,IAAIP,QAAQ,CAACQ,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAHzB;AAKH,GARD;;AAUA,WAASR,OAAT,GAAmB;AAAE,WAAO;AAAEN,MAAAA,IAAI,EAAEjB,aAAa,CAAC2C;AAAtB,KAAP;AAA+C;;AACpE,WAAShB,OAAT,CAAiBe,KAAjB,EAAwB;AAAE,WAAO;AAAEzB,MAAAA,IAAI,EAAEjB,aAAa,CAAC4C,cAAtB;AAAsCF,MAAAA;AAAtC,KAAP;AAAsD;;AAChF,WAASZ,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEZ,MAAAA,IAAI,EAAEjB,aAAa,CAAC6C,cAAtB;AAAsChB,MAAAA;AAAtC,KAAP;AAAsD;AACnF,C,CAED;;;AACA,SAASjB,OAAT,CAAiBkC,EAAjB,EAAqB;AACjB,SAAOxB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAACuB,EAAD,CAAR,CAAR;AAEAjC,IAAAA,IAAI,CAACF,MAAL,CAAYmC,EAAZ,EACKtB,IADL,CAEQC,IAAI,IAAIH,QAAQ,CAACK,OAAO,CAACmB,EAAD,CAAR,CAFxB,EAGQjB,KAAK,IAAIP,QAAQ,CAACQ,OAAO,CAACgB,EAAD,EAAKjB,KAAK,CAACE,QAAN,EAAL,CAAR,CAHzB;AAKH,GARD;;AAUA,WAASR,OAAT,CAAiBuB,EAAjB,EAAqB;AAAE,WAAO;AAAE7B,MAAAA,IAAI,EAAEjB,aAAa,CAAC+C,cAAtB;AAAsCD,MAAAA;AAAtC,KAAP;AAAmD;;AAC1E,WAASnB,OAAT,CAAiBmB,EAAjB,EAAqB;AAAE,WAAO;AAAE7B,MAAAA,IAAI,EAAEjB,aAAa,CAACgD,cAAtB;AAAsCF,MAAAA;AAAtC,KAAP;AAAmD;;AAC1E,WAAShB,OAAT,CAAiBgB,EAAjB,EAAqBjB,KAArB,EAA4B;AAAE,WAAO;AAAEZ,MAAAA,IAAI,EAAEjB,aAAa,CAACiD,cAAtB;AAAsCH,MAAAA,EAAtC;AAA0CjB,MAAAA;AAA1C,KAAP;AAA0D;AAC3F","sourcesContent":["import { userConstants } from '../constants';\nimport AuthService from '../services/AuthService';\n// import { alertActions } from './';\nimport Router from 'next/router';\n\nexport const userActions = {\n    login,\n    logout,\n    loggedIn,\n    register,\n    getAll,\n    defaultUser,\n    setAccessToken,\n    delete: _delete\n};\n\nconst auth = new AuthService()\n\nfunction defaultUser(name, email){\n    const currentUser = {name, email}\n    return {type: userConstants.DEFAULT_USER, currentUser}\n}\n\nfunction setAccessToken(token){\n    return {type: userConstants.ACCESS_TOKEN, token}\n}\n\nfunction login(email, password) {\n    //console.log(\"Called Me!\")\n    return dispatch => {\n        dispatch(request({ email }));\n\n        auth.login(email, password)\n            .then(\n                user => { \n                    con\n                    dispatch(success(user));\n                    Router.push('/home');\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    // dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction loggedIn() {\n    return dispatch => {\n        dispatch(request());\n        dispatch(success(auth.loggedIn()));\n    };\n    function request() { return { type: userConstants.TOKEN_REQUEST } }\n    function success(status) { return { type: userConstants.TOKEN_SUCCESS, status } }\n}\n\nfunction logout() {\n    auth.logout();\n    return { type: userConstants.LOGOUT };\n}\n\nfunction register(user) {\n    return dispatch => {\n        dispatch(request(user));\n\n        auth.register(user)\n            .then(\n                user => { \n                    dispatch(success());\n                    Router.push('/login');\n                    // dispatch(alertActions.success('Registration successful'));\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    // dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAll() {\n    return dispatch => {\n        dispatch(request());\n\n        auth.getAll()\n            .then(\n                users => dispatch(success(users)),\n                error => dispatch(failure(error.toString()))\n            );\n    };\n\n    function request() { return { type: userConstants.GETALL_REQUEST } }\n    function success(users) { return { type: userConstants.GETALL_SUCCESS, users } }\n    function failure(error) { return { type: userConstants.GETALL_FAILURE, error } }\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    return dispatch => {\n        dispatch(request(id));\n\n        auth.delete(id)\n            .then(\n                user => dispatch(success(id)),\n                error => dispatch(failure(id, error.toString()))\n            );\n    };\n\n    function request(id) { return { type: userConstants.DELETE_REQUEST, id } }\n    function success(id) { return { type: userConstants.DELETE_SUCCESS, id } }\n    function failure(id, error) { return { type: userConstants.DELETE_FAILURE, id, error } }\n}"]},"metadata":{},"sourceType":"module"}