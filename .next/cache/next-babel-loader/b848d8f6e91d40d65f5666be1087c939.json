{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport glob from \"glob\";\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\";\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { getPageList } from \"../utils/helpers\";\n\nfunction MyApp({\n  Component,\n  pageProps,\n  reduxStore,\n  persistor\n}) {\n  const Layout = Component.Layout || AdminLayout;\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }));\n}\n\nMyApp.getInitialProps = async appContext => {\n  var _result$data;\n\n  //const currentUser = await getCurrentUser(); // define this beforehand\n  const pages = await glob('pages/**/*.js', {\n    cwd: __dirname\n  });\n  console.log(`The pages in ${JSON.stringifypages}`);\n  const currentUser = true;\n  const response = await fetch(routeConstants.REFRESH_TOKEN, {\n    method: \"POST\",\n    credentials: 'include'\n  }, []);\n  const result = await response.json();\n  const accessToken = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.accessToken;\n  let urlPath = appContext.router.pathname;\n  appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"));\n  const appProps = await App.getInitialProps(appContext);\n\n  if (accessToken && accessToken !== \"\") {\n    appContext.ctx.reduxStore.dispatch(userActions.setAccessToken(accessToken)); // check that we are in SSR mode (NOT static and NOT client-side)\n\n    if (true && appContext.ctx.res.writeHead) {\n      // if path is / or login and we already have accessToken then change to /home\n      if (urlPath === '/login' || urlPath === '/') {\n        urlPath = '/home';\n      } //route to the path\n\n\n      appContext.ctx.res.writeHead(302, {\n        Location: urlPath\n      });\n      appContext.ctx.res.end();\n    }\n  } else {\n    // no accessToken, route to login, if path is not already on /login \n    if (true && appContext.ctx.res.writeHead) {\n      if (urlPath !== '/login') {\n        appContext.ctx.res.writeHead(302, {\n          Location: \"/login\"\n        });\n        appContext.ctx.res.end();\n      }\n    }\n  }\n\n  return _objectSpread({}, appProps);\n};\n\nexport default withReduxStore(MyApp);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["glob","AdminLayout","Provider","PersistGate","withReduxStore","App","Container","userConstants","routeConstants","userActions","fetch","route","getPageList","MyApp","Component","pageProps","reduxStore","persistor","Layout","getInitialProps","appContext","pages","cwd","__dirname","console","log","JSON","stringifypages","currentUser","response","REFRESH_TOKEN","method","credentials","result","json","accessToken","data","urlPath","router","pathname","ctx","dispatch","defaultUser","appProps","setAccessToken","res","writeHead","Location","end"],"mappings":"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","sourcesContent":["import glob from \"glob\"\n\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\"\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\"\nimport { getPageList } from \"../utils/helpers\"\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  \n \n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/ui.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (appContext) => {\n    //const currentUser = await getCurrentUser(); // define this beforehand\n    const pages = await glob('pages/**/*.js', { cwd: __dirname })\n\n    console.log(`The pages in ${JSON.stringifypages}`);\n\n    const currentUser = true\n    const response = await fetch(routeConstants.REFRESH_TOKEN,{\n      method:\"POST\",\n      credentials:'include'\n    },[])\n    const result = await response.json()\n    const accessToken = result.data?.accessToken;\n\n\n    let urlPath = appContext.router.pathname\n\n    appContext.ctx.reduxStore.dispatch(userActions.defaultUser(\"babatunde\", \"obabs78@gmail.com\"))\n    const appProps = await App.getInitialProps(appContext);\n    if (accessToken && accessToken !== \"\"){\n      appContext.ctx.reduxStore.dispatch(userActions.setAccessToken(accessToken))\n      \n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        \n        \n        // if path is / or login and we already have accessToken then change to /home\n        if (urlPath === '/login' || urlPath === '/') {\n          urlPath = '/home'  \n        }\n\n        //route to the path\n        appContext.ctx.res.writeHead(302, { Location: urlPath });\n        appContext.ctx.res.end();\n        \n      }\n    }else { \n      // no accessToken, route to login, if path is not already on /login \n\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        if (urlPath !== '/login') {\n            appContext.ctx.res.writeHead(302, { Location: \"/login\" });\n            appContext.ctx.res.end();\n        }\n        \n      }\n    }\n\n    return { ...appProps};\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}