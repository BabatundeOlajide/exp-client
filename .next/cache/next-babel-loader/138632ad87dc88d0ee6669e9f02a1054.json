{"ast":null,"code":"import { userConstants } from '../constants';\nimport UserService from '../services/UserService';\nexport const userActions = {\n  addUser,\n  updateUser,\n  getAllUsers,\n  selectUser,\n  searchUser,\n  resetFilter,\n  uploadReport,\n  delete: _delete\n};\nconst userService = new UserService();\n\nfunction addUser(data) {\n  return (dispatch, getState) => {\n    const {\n      token\n    } = getState().authentication; //dispatch(request(data));\n\n    userService.addUser(data, token).then(result => {\n      //console.log(JSON.stringify(result))\n      dispatch(success(result.data.user));\n    }, error => {\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction updateUser(data) {\n  return (dispatch, getState) => {\n    const {\n      token\n    } = getState().authentication;\n    dispatch(request());\n    userService.updateUser(data, token).then(result => {\n      //console.log(JSON.stringify(result))\n      dispatch(success(result.data.user));\n    }, error => {\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.UPDATE_USER_REQUEST\n    };\n  }\n\n  function updateUser(user) {\n    return {\n      type: userConstants.UPDATE_USER_SUCCESS,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.UPDATE_USER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAllUsers() {\n  return (dispatch, getState) => {\n    dispatch(request());\n    const token = getState().authentication.token;\n    userService.getAllUser(token).then(result => dispatch(success(result.data.users)), error => dispatch(failure(error.toString())));\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error\n    };\n  }\n}\n\nfunction selectUser(userId) {\n  return dispatch => {\n    dispatch({\n      type: userConstants.SELECT_USER,\n      userId\n    });\n  };\n}\n\nfunction resetFilter() {\n  return (dispatch, getState) => {\n    const users = getState().users.allUsers;\n    dispatch({\n      type: userConstants.RESET_FILTER,\n      users\n    });\n  };\n}\n\nfunction searchUser(s) {\n  return (dispatch, getState) => {\n    const all = getState().users.allUsers;\n    const query = s.toLowerCase();\n\n    if (query && query != \"\") {\n      const q = query.split(\" \");\n      const filtered = all.filter(user => {\n        if (q[0] && user.email.toLowerCase().includes(q[0])) {\n          return user;\n        }\n\n        if (q[1] && user.email.toLowerCase().includes(q[1])) {\n          return user;\n        }\n\n        if (q[0] && user.firstName.toLowerCase().includes(q[0])) {\n          return user;\n        }\n\n        if (q[1] && user.firstName.toLowerCase().includes(q[1])) {\n          return user;\n        }\n\n        if (q[0] && user.lastName.toLowerCase().includes(q[0])) {\n          return user;\n        }\n\n        if (q[1] && user.lastName.toLowerCase().includes(q[1])) {\n          return user;\n        }\n      });\n      dispatch({\n        type: userConstants.FILTERED_USER,\n        users: filtered\n      });\n    } else {\n      dispatch({\n        type: userConstants.FILTERED_USER,\n        user: all\n      });\n    }\n  };\n}\n\nfunction uploadReport(data) {\n  return (dispatch, getState) => {\n    const {\n      token\n    } = getState().authentication;\n    dispatch(request());\n    userService.uploadReport(data, token).then(result => {\n      dispatch(success(result.data.user));\n      dispatch(uploadSuccess());\n    }, error => {\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.REPORT_UPLOAD_REQUEST\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.UPDATE_USER_IN_STORE,\n      user\n    };\n  }\n\n  function uploadSuccess() {\n    return {\n      type: userConstants.REPORT_UPLOAD_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REPORT_UPLOAD_FAILURE,\n      error\n    };\n  }\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n    userService.delete(id).then(user => dispatch(success(id)), error => dispatch(failure(id, error.toString())));\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/actions/user.actions.js"],"names":["userConstants","UserService","userActions","addUser","updateUser","getAllUsers","selectUser","searchUser","resetFilter","uploadReport","delete","_delete","userService","data","dispatch","getState","token","authentication","then","result","success","user","error","failure","toString","request","type","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","getAllUser","users","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","userId","SELECT_USER","allUsers","RESET_FILTER","s","all","query","toLowerCase","q","split","filtered","filter","email","includes","firstName","lastName","FILTERED_USER","uploadSuccess","REPORT_UPLOAD_REQUEST","UPDATE_USER_IN_STORE","REPORT_UPLOAD_SUCCESS","REPORT_UPLOAD_FAILURE","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from '../constants';\n\nimport UserService from '../services/UserService';\n\nexport const userActions = {\n    addUser,\n    updateUser,\n    getAllUsers,\n    selectUser,\n    searchUser,\n    resetFilter,\n    uploadReport,\n    delete: _delete\n};\n\nconst userService = new UserService()\n\n\nfunction addUser(data) {\n    return (dispatch, getState) => {\n        const {token} = getState().authentication;\n        //dispatch(request(data));\n\n        userService.addUser(data, token)\n            .then(\n                result => { \n                    //console.log(JSON.stringify(result))\n                    dispatch(success(result.data.user));\n                    \n                    \n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\n\nfunction updateUser(data) {\n    return (dispatch, getState) => {\n        const {token} = getState().authentication;\n        dispatch(request());\n\n        userService.updateUser(data, token)\n            .then(\n                result => { \n                    //console.log(JSON.stringify(result))\n                    dispatch(success(result.data.user));\n                    \n                    \n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                }\n            );\n    };\n\n    function request() { return { type: userConstants.UPDATE_USER_REQUEST } }\n    function updateUser(user) { return { type: userConstants.UPDATE_USER_SUCCESS, user } }\n    function success(user) { return { type: userConstants.UPDATE_USER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAllUsers() {\n    return (dispatch, getState) => {\n        dispatch(request());\n        const token = getState().authentication.token\n        userService.getAllUser(token)\n            .then(\n                \n                result => dispatch(success(result.data.users)),\n                error => dispatch(failure(error.toString()))\n            );\n    };\n\n    function request() { return { type: userConstants.GETALL_REQUEST } }\n    function success(users) { \n        return { type: userConstants.GETALL_SUCCESS, users } }\n    function failure(error) { return { type: userConstants.GETALL_FAILURE, error } }\n}\n\nfunction selectUser(userId) {\n    return (dispatch) => {\n        dispatch({ type: userConstants.SELECT_USER, userId });\n        \n    };\n    \n}\n\nfunction resetFilter() {\n    return (dispatch, getState) => {\n        const users = getState().users.allUsers\n        dispatch({ type: userConstants.RESET_FILTER, users });\n        \n    };\n    \n}\n\nfunction searchUser(s) {\n    return (dispatch, getState) => {\n        const all = getState().users.allUsers\n        const  query = s.toLowerCase()\n\n        if (query && query != \"\"){\n            const q = query.split(\" \")\n            const filtered = all.filter(user => {\n                if (q[0] && user.email.toLowerCase().includes(q[0])){\n                    return user\n                }\n\n                if (q[1] && user.email.toLowerCase().includes(q[1])){\n                    return user\n                }\n\n                if (q[0] && user.firstName.toLowerCase().includes(q[0])){\n                    return user\n                }\n\n                if (q[1] && user.firstName.toLowerCase().includes(q[1])){\n                    return user\n                }\n\n                if (q[0] && user.lastName.toLowerCase().includes(q[0])){\n                    return user\n                }\n\n                if (q[1] && user.lastName.toLowerCase().includes(q[1])){\n                    return user\n                }\n                    \n            })\n\n            dispatch({ type: userConstants.FILTERED_USER, users: filtered })\n\n        } else {\n\n            dispatch({ type: userConstants.FILTERED_USER, user: all })\n        }\n        \n    };\n    \n}\n\n\nfunction uploadReport(data) {\n    return (dispatch, getState) => {\n        const {token} = getState().authentication;\n        dispatch(request());\n\n        userService.uploadReport(data, token)\n            \n            .then(\n                result => { \n                    \n                    dispatch(success(result.data.user));\n                    dispatch(uploadSuccess())\n                    \n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                }\n            );\n    };\n\n    function request() { return { type: userConstants.REPORT_UPLOAD_REQUEST} }\n    function success(user) { return { type: userConstants.UPDATE_USER_IN_STORE, user } }\n    function uploadSuccess() { return { type: userConstants.REPORT_UPLOAD_SUCCESS } }\n    function failure(error) { return { type: userConstants.REPORT_UPLOAD_FAILURE, error } }\n}\n\n\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    return dispatch => {\n        dispatch(request(id));\n\n        userService.delete(id)\n            .then(\n                user => dispatch(success(id)),\n                error => dispatch(failure(id, error.toString()))\n            );\n    };\n\n    function request(id) { return { type: userConstants.DELETE_REQUEST, id } }\n    function success(id) { return { type: userConstants.DELETE_SUCCESS, id } }\n    function failure(id, error) { return { type: userConstants.DELETE_FAILURE, id, error } }\n}"]},"metadata":{},"sourceType":"module"}