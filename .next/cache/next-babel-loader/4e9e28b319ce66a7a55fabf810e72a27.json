{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\nimport { closeModal } from \"../utils/functions\";\n\nvar UpdateUserModal = function UpdateUserModal(_ref) {\n  _s();\n\n  var children = _ref.children,\n      pageProps = _ref.pageProps,\n      updatingUser = _ref.updatingUser,\n      updateUserError = _ref.updateUserError,\n      error = _ref.error,\n      updateUserSuccess = _ref.updateUserSuccess,\n      updateUser = _ref.updateUser,\n      selectedUser = _ref.selectedUser,\n      lastUpdated = _ref.lastUpdated;\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      errors = _useForm.errors;\n\n  var onSubmit = function onSubmit(formData) {\n    // add selectedUser id\n    var data = {\n      userId: selectedUser.id,\n      data: formData\n    };\n    updateUser(data); // reset form\n\n    if (!updateUserError) {\n      reset();\n      closeModal(\"updateUserModal\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    id: \"updateUserModal\",\n    className: \"modal\"\n  }, __jsx(\"div\", {\n    className: \"modal-content\",\n    style: {\n      width: \"50%\"\n    }\n  }, __jsx(\"span\", {\n    className: \"close\",\n    \"data-type\": \"hide-modal\",\n    \"data-target\": \"updateUserModal\"\n  }, \"\\xD7\"), __jsx(\"h3\", null, \"Update User\"), __jsx(\"hr\", {\n    className: \"divider\"\n  }), updateUserError && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \" \", error))), updateUserSuccess && lastUpdated && lastUpdated.id == selectedUser.id && __jsx(\"div\", {\n    className: \"panel code success-msg\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \" Record updated!\"))), Object.keys(errors).length != 0 && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, errors.firstName && __jsx(\"li\", null, \" \", errors.firstName.message, \" \"), errors.lastName && __jsx(\"li\", null, \" \", errors.lastName.message, \" \"), errors.email && __jsx(\"li\", null, \" \", errors.email.message), errors.phoneNumber && __jsx(\"li\", null, \" \", errors.phoneNumber.message, \" \"))), selectedUser && __jsx(\"form\", {\n    key: selectedUser.id,\n    className: \"pure-form pure-form-aligned\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"fieldset\", null, __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Firstname2\"\n  }, \"Firstname\"), __jsx(\"input\", {\n    name: \"firstName\",\n    type: \"text\",\n    id: \"Firstname2\",\n    placeholder: \"FirstName\",\n    defaultValue: selectedUser.firstName,\n    ref: register({\n      required: \"FirstName is required\"\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Lastname2\"\n  }, \"Lastname\"), __jsx(\"input\", {\n    name: \"lastName\",\n    type: \"text\",\n    id: \"Lastname2\",\n    placeholder: \"LastName\",\n    defaultValue: selectedUser.lastName,\n    ref: register({\n      required: \"LastName is required\"\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Email2\"\n  }, \"Email Address\"), __jsx(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    id: \"Email2\",\n    placeholder: \"Email Address\",\n    defaultValue: selectedUser.email,\n    ref: register({\n      required: \"Email is required\",\n      pattern: {\n        value: pattern.EMAIL,\n        message: errorMessage.INVALID_EMAIL\n      }\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"Phone2\"\n  }, \"Phone Number\"), __jsx(\"input\", {\n    type: \"tel\",\n    name: \"phoneNumber\",\n    pattern: \"^(\\\\+1[0-9]{3}|[0-9]{3})[0-9]{3}[0-9]{4}$\",\n    id: \"Phone2\",\n    placeholder: \"Phone number\",\n    defaultValue: selectedUser.phoneNumber,\n    ref: register({\n      required: \"Phone Number is required\",\n      pattern: {\n        value: pattern.PHONE,\n        message: errorMessage.INVALID_PHONE\n      }\n    })\n  })), __jsx(\"div\", {\n    className: \"pure-controls\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"pure-button button-secondary\"\n  }, updatingUser && __jsx(\"img\", {\n    src: \"/img/loading.gif\",\n    className: \"button-loader\"\n  }), \"Submit\"))))));\n};\n\n_s(UpdateUserModal, \"NZvb3w7fZeCHPRzMNHe38sEWX9M=\", false, function () {\n  return [useForm];\n});\n\n_c = UpdateUserModal;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    updateUserError: state.users.updateUserError,\n    updateUserSuccess: state.users.updateUserSuccess,\n    selectedUser: state.users.selectedUser,\n    error: state.users.error,\n    lastUpdated: state.users.lastUpdated,\n    updatingUser: state.users.updatingUser\n  };\n};\n\nvar mapDispatchToProps = {\n  updateUser: userActions.updateUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateUserModal);\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateUserModal\");","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/components/updateUserModal.js"],"names":["Link","userActions","connect","useForm","pattern","errorMessage","closeModal","UpdateUserModal","children","pageProps","updatingUser","updateUserError","error","updateUserSuccess","updateUser","selectedUser","lastUpdated","register","handleSubmit","reset","errors","onSubmit","formData","data","userId","id","width","Object","keys","length","firstName","message","lastName","email","phoneNumber","required","value","EMAIL","INVALID_EMAIL","PHONE","INVALID_PHONE","mapStateToProps","state","users","mapDispatchToProps"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\nimport { closeModal } from \"../utils/functions\";\n\nconst UpdateUserModal = ({children, pageProps,updatingUser, updateUserError,error, updateUserSuccess, updateUser, selectedUser, lastUpdated}) => {\n    const {register, handleSubmit,reset, errors} = useForm();\n    const onSubmit = formData => {\n        // add selectedUser id\n        const data = {\n            userId: selectedUser.id,\n            data: formData\n        }\n        \n\n        updateUser(data);\n\n        // reset form\n        if (!updateUserError){\n            reset()\n            closeModal(\"updateUserModal\")\n            \n        }\n            \n\n    }\n    return <div id=\"updateUserModal\" className=\"modal\">\n         \n        <div className=\"modal-content\" style={{width:\"50%\"}}>\n            <span className=\"close\" data-type=\"hide-modal\" data-target=\"updateUserModal\">&times;</span>\n            <h3>Update User</h3>\n            <hr className=\"divider\"/>\n            \n            { updateUserError && <div className=\"panel code error-msg\">\n                  <ul>\n                    <li> {error}</li>    \n                  </ul>\n                   \n                </div>\n\n            }\n\n            { updateUserSuccess && lastUpdated && lastUpdated.id == selectedUser.id && <div className=\"panel code success-msg\">\n                  <ul>\n                    <li> Record updated!</li>    \n                  </ul>\n                   \n                </div>\n\n            }\n            { Object.keys(errors).length != 0 && \n                <div className=\"panel code error-msg\">\n                  <ul>\n                    \n                    {errors.firstName && <li> {errors.firstName.message} </li> }\n                    {errors.lastName && <li> {errors.lastName.message} </li> }\n    \n                    {errors.email && <li> {errors.email.message}</li> }\n                    {errors.phoneNumber && <li> {errors.phoneNumber.message} </li> }\n                    \n                  </ul>\n                   \n                </div>\n            }\n\n            { selectedUser &&\n            <form key={selectedUser.id} className=\"pure-form pure-form-aligned\" onSubmit={handleSubmit(onSubmit)}>\n              <fieldset>\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Firstname2\">Firstname</label>\n                      <input name=\"firstName\" type=\"text\" id=\"Firstname2\" placeholder=\"FirstName\" defaultValue={selectedUser.firstName} ref={\n                          register({\n                              required:\"FirstName is required\"\n                          })\n                      } />\n                  </div>\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Lastname2\">Lastname</label>\n                      <input name=\"lastName\" type=\"text\" id=\"Lastname2\" placeholder=\"LastName\" defaultValue={selectedUser.lastName} ref={\n                          register({\n                              required:\"LastName is required\"\n                          })\n                      } />\n                  </div>\n                  \n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Email2\">Email Address</label>\n                      <input type=\"email\" name=\"email\" id=\"Email2\" placeholder=\"Email Address\" defaultValue={selectedUser.email} ref={register({required:\"Email is required\", \n                            pattern:{\n                            value:pattern.EMAIL,\n                            message:errorMessage.INVALID_EMAIL\n                            }\n                        })} />\n                  </div>\n\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"Phone2\">Phone Number</label>\n                      <input type=\"tel\" name=\"phoneNumber\" pattern=\"^(\\+1[0-9]{3}|[0-9]{3})[0-9]{3}[0-9]{4}$\" id=\"Phone2\" placeholder=\"Phone number\" defaultValue={selectedUser.phoneNumber} ref={register({required:\"Phone Number is required\", \n                            pattern:{\n                            value:pattern.PHONE,\n                            message:errorMessage.INVALID_PHONE\n\n                            }\n                        })} />\n                  </div>\n                  \n                  <div className=\"pure-controls\">\n                      <button type=\"submit\" className=\"pure-button button-secondary\">\n                        {updatingUser && <img src=\"/img/loading.gif\" className=\"button-loader\" /> }\n                          Submit\n                        </button>\n                  </div>\n                </fieldset>\n              </form>\n             }\n            \n        </div>\n    </div>\n}\n\n\nconst mapStateToProps = state => ({\n    updateUserError: state.users.updateUserError,\n    updateUserSuccess: state.users.updateUserSuccess,\n    selectedUser: state.users.selectedUser,\n    error:state.users.error,\n    lastUpdated: state.users.lastUpdated,\n    updatingUser: state.users.updatingUser,\n  });\n\nconst mapDispatchToProps = {\n    updateUser: userActions.updateUser\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateUserModal) \n"]},"metadata":{},"sourceType":"module"}