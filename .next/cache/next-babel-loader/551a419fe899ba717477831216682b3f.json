{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { routeConstants } from \"../constants\";\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    //this.domain = domain || 'http://localhost:4000'\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, password) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetch(routeConstants.ADMIN_LOGIN, {\n                  method: 'POST',\n                  body: JSON.stringify({\n                    email: email,\n                    password: password\n                  })\n                });\n\n              case 2:\n                result = _context.sent;\n\n                if (result.success) {\n                  this.setToken(result.data.token); // do fetch profile and default data\n                } else {}\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x3, _x4) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // return !!token && !isTokenExpired(token) // handwaiving here\n\n      return !!token; // handwaiving here\n    }\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(profile) {\n      // Saves profile data to localStorage\n      localStorage.setItem('profile', JSON.stringify(profile));\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Retrieves the profile data from localStorage\n      var profile = localStorage.getItem('profile');\n      return profile ? JSON.parse(localStorage.profile) : {};\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(tokenResponse) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', tokenResponse.accessToken);\n      localStorage.setItem('token', tokenResponse.token);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('profile');\n    }\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/utils/AuthService.js"],"names":["routeConstants","AuthService","fetch","bind","login","getProfile","email","password","ADMIN_LOGIN","method","body","JSON","stringify","result","success","setToken","data","token","getToken","profile","localStorage","setItem","getItem","parse","tokenResponse","accessToken","removeItem","response","status","error","Error","statusText","url","options","headers","loggedIn","then","_checkStatus","json"],"mappings":";;;;;;;;;;AAAA,SAAQA,cAAR,QAA8B,cAA9B;;IACqBC,W;AACjB,yBAAc;AAAA;;AACV;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;;;;6FAEWG,K,EAAOC,Q;;;;;;;uBAEM,KAAKL,KAAL,CAAWF,cAAc,CAACQ,WAA1B,EAAuC;AACxDC,kBAAAA,MAAM,EAAE,MADgD;AAExDC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBN,oBAAAA,KAAK,EAALA,KADiB;AAEjBC,oBAAAA,QAAQ,EAARA;AAFiB,mBAAf;AAFkD,iBAAvC,C;;;AAAfM,gBAAAA,M;;AAQN,oBAAGA,MAAM,CAACC,OAAV,EAAkB;AACd,uBAAKC,QAAL,CAAcF,MAAM,CAACG,IAAP,CAAYC,KAA1B,EADc,CAEd;AACH,iBAHD,MAGO,CAEN;;;;;;;;;;;;;;;;;;+BAMM;AACP;AACA,UAAMA,KAAK,GAAG,KAAKC,QAAL,EAAd,CAFO,CAGP;;AACA,aAAO,CAAC,CAACD,KAAT,CAJO,CAIQ;AAClB;;;+BAEUE,O,EAAS;AAChB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCV,IAAI,CAACC,SAAL,CAAeO,OAAf,CAAhC;AACH;;;iCAEY;AACT;AACA,UAAMA,OAAO,GAAGC,YAAY,CAACE,OAAb,CAAqB,SAArB,CAAhB;AACA,aAAOH,OAAO,GAAGR,IAAI,CAACY,KAAL,CAAWH,YAAY,CAACD,OAAxB,CAAH,GAAsC,EAApD;AACH;;;6BAEQK,a,EAAe;AACpB;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCG,aAAa,CAACC,WAA/C;AACAL,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BG,aAAa,CAACP,KAA5C;AACH;;;+BAEU;AACP;AACA,aAAOG,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;;6BAEQ;AACL;AACAF,MAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAN,MAAAA,YAAY,CAACM,UAAb,CAAwB,SAAxB;AACH;;;iCAEYC,Q,EAAU;AACnB;AACA,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,eAAOD,QAAP;AACH,OAFD,MAEO;AACH,YAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAZ;AACAF,QAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,cAAME,KAAN;AACH;AACJ;;;;;;;;;;;;;gBAEKG,G,EAAKC,O,EAAS;AAChB;AACA,UAAMC,OAAO,GAAG;AACZ,kBAAU,kBADE;AAEZ,wBAAgB;AAFJ,OAAhB;;AAKA,UAAI,KAAKC,QAAL,EAAJ,EAAqB;AACjBD,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAY,KAAKhB,QAAL,EAAvC;AACH;;AAED,aAAOhB,KAAK,CAAC8B,GAAD;AACJE,QAAAA,OAAO,EAAPA;AADI,SAEDD,OAFC,EAAL,CAIFG,IAJE,CAIG,KAAKC,YAJR,EAKFD,IALE,CAKG,UAAAT,QAAQ;AAAA,eAAIA,QAAQ,CAACW,IAAT,EAAJ;AAAA,OALX,CAAP;AAMH,K;;;;;;SA5FgBrC,W","sourcesContent":["import {routeConstants } from \"../constants\";\nexport default class AuthService {\n    constructor() {\n        //this.domain = domain || 'http://localhost:4000'\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    async login(email, password) {\n        // Get a token\n        const result = await this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n        \n        if(result.success){\n            this.setToken(result.data.token)\n            // do fetch profile and default data\n        } else {\n            \n        }\n        \n            \n            \n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        // return !!token && !isTokenExpired(token) // handwaiving here\n        return !!token // handwaiving here\n    }\n\n    setProfile(profile) {\n        // Saves profile data to localStorage\n        localStorage.setItem('profile', JSON.stringify(profile))\n    }\n\n    getProfile() {\n        // Retrieves the profile data from localStorage\n        const profile = localStorage.getItem('profile')\n        return profile ? JSON.parse(localStorage.profile) : {}\n    }\n\n    setToken(tokenResponse) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', tokenResponse.accessToken)\n        localStorage.setItem('token', tokenResponse.token)\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        localStorage.removeItem('profile');\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}