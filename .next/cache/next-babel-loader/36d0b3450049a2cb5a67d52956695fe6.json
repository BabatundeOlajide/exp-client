{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { useEffect } from \"react\";\nimport { Router } from \"next/router\";\n\nfunction MyApp({\n  Component,\n  pageProps,\n  reduxStore,\n  persistor\n}) {\n  const Layout = Component.Layout || AdminLayout;\n  useEffect(() => {\n    const currentUser = true; //const appProps = await App.getInitialProps(appContext);\n    // check that we are in SSR mode (NOT static and NOT client-side)\n\n    if (true && appContext.ctx.res.writeHead) {\n      if (currentUser) {\n        console.log('called here');\n        appContext.ctx.res.writeHead(302, {\n          Location: \"/home\"\n        });\n        appContext.ctx.res.end();\n      }\n    }\n\n    Router.push;\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }));\n}\n\nMyApp.getInitialProps = async appContext => {// //const currentUser = await getCurrentUser(); // define this beforehand\n  // const currentUser = true\n  // const appProps = await App.getInitialProps(appContext);\n  // // check that we are in SSR mode (NOT static and NOT client-side)\n  // if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n  //   if (currentUser) {\n  //       appContext.ctx.res.writeHead(302, { Location: \"/home\" });\n  //       appContext.ctx.res.end();\n  //   }\n  // }\n  // return { ...appProps, currentUser };\n};\n\nexport default withReduxStore(MyApp);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["AdminLayout","Provider","PersistGate","withReduxStore","App","Container","useEffect","Router","MyApp","Component","pageProps","reduxStore","persistor","Layout","currentUser","appContext","ctx","res","writeHead","console","log","Location","end","push","getInitialProps"],"mappings":";;AAEA,OAAO,6BAAP;AACA,OAAO,yCAAP;AACA,OAAO,8BAAP;AACA,OAAO,yBAAP;AAEA,OAAO,uBAAP;AAIA,OAAOA,WAAP,MAAwB,mCAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA,UAAxB;AAAoCC,EAAAA;AAApC,CAAf,EAAgE;AAC9D,QAAMC,MAAM,GAAGJ,SAAS,CAACI,MAAV,IAAoBb,WAAnC;AACAM,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMQ,WAAW,GAAG,IAApB,CADY,CAEV;AACA;;AACA,QAAI,QAAiCC,UAAU,CAACC,GAAX,CAAeC,GAAf,CAAmBC,SAAxD,EAAmE;AACjE,UAAIJ,WAAJ,EAAiB;AACbK,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAL,QAAAA,UAAU,CAACC,GAAX,CAAeC,GAAf,CAAmBC,SAAnB,CAA6B,GAA7B,EAAkC;AAAEG,UAAAA,QAAQ,EAAE;AAAZ,SAAlC;AACAN,QAAAA,UAAU,CAACC,GAAX,CAAeC,GAAf,CAAmBK,GAAnB;AACH;AACF;;AACDf,IAAAA,MAAM,CAACgB,IAAP;AACH,GAZQ,EAYP,EAZO,CAAT;AAaA,SACE,4BACA,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEZ;AAAjB,KACE,MAAC,WAAD;AAAa,IAAA,OAAO,EAAE,IAAtB;AAA4B,IAAA,SAAS,EAAEC;AAAvC,KACE,MAAC,MAAD,EAAYF,SAAZ,EACE,MAAC,SAAD,EAAeA,SAAf,CADF,CADF,CADF,CADA,EASE;AAAQ,IAAA,IAAI,EAAC,iBAAb;AAA+B,IAAA,GAAG,EAAC;AAAnC,IATF,EAUE;AAAQ,IAAA,IAAI,EAAC,iBAAb;AAA+B,IAAA,GAAG,EAAC;AAAnC,IAVF,EAWE;AAAQ,IAAA,IAAI,EAAC,iBAAb;AAA+B,IAAA,GAAG,EAAC;AAAnC,IAXF,CADF;AAeD;;AAEDF,KAAK,CAACgB,eAAN,GAAwB,MAAMT,UAAN,IAAoB,CACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAZD;;AAcA,eAAeZ,cAAc,CAACK,KAAD,CAA7B","sourcesContent":["\n\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { useEffect } from \"react\"\nimport { Router } from \"next/router\"\n\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  useEffect(()=>{\n    const currentUser = true\n      //const appProps = await App.getInitialProps(appContext);\n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        if (currentUser) {\n            console.log('called here')\n            appContext.ctx.res.writeHead(302, { Location: \"/home\" });\n            appContext.ctx.res.end();\n        }\n      }\n      Router.push\n  },[])\n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/ui.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async appContext => {\n    // //const currentUser = await getCurrentUser(); // define this beforehand\n    // const currentUser = true\n    // const appProps = await App.getInitialProps(appContext);\n    // // check that we are in SSR mode (NOT static and NOT client-side)\n    // if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n    //   if (currentUser) {\n    //       appContext.ctx.res.writeHead(302, { Location: \"/home\" });\n    //       appContext.ctx.res.end();\n    //   }\n    // }\n    // return { ...appProps, currentUser };\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}