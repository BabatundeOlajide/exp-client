{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\n\nconst UploadReportModal = ({\n  children,\n  pageProps,\n  addUserError,\n  addUser,\n  selectedUser,\n  lastAdded\n}) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm();\n\n  const parseCsv = data => {\n    let parsedata = [];\n    let newLinebrk = data.split(\"\\n\");\n\n    for (let i = 0; i < newLinebrk.length; i++) {\n      parsedata.push(newLinebrk[i].split(\",\"));\n    }\n\n    const header = parsedata[0];\n    const records = parsedata.slice();\n    console.log(JSON.stringify(parsedata.slice(-1)));\n    return parsedata;\n  };\n\n  const onSubmit = formData => {\n    const fileReader = new FileReader();\n    const file = formData.selectedFile[0];\n    let parsedCsv = null;\n    fileReader.addEventListener(\"load\", e => {\n      parsedCsv = parseCsv(e.target.result);\n      console.log(parsedCsv);\n    });\n    fileReader.readAsBinaryString(file); //console.log(parsedCsv)\n    //addUser(formData);\n    // if (!addUserError){\n    //     reset()\n    // }\n  };\n\n  return __jsx(\"div\", {\n    id: \"uploadReportModal\",\n    className: \"modal\"\n  }, __jsx(\"div\", {\n    className: \"modal-content\"\n  }, __jsx(\"span\", {\n    className: \"close\",\n    \"data-type\": \"hide-modal\",\n    \"data-target\": \"uploadReportModal\"\n  }, \"\\xD7\"), selectedUser && __jsx(\"h3\", null, \"Upload a report for \", __jsx(\"span\", {\n    className: \"blue\"\n  }, selectedUser.firstName + \" \" + selectedUser.lastName)), __jsx(\"hr\", {\n    className: \"divider\"\n  }), lastAdded && !addUserError && Object.keys(errors).length == 0 && __jsx(\"div\", {\n    className: \"panel code\"\n  }, __jsx(\"h4\", {\n    className: \"success\"\n  }, \" LAST RECORD: \", lastAdded.firstName + \" \" + lastAdded.lastName)), addUserError && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \" \", error))), Object.keys(errors).length != 0 && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, errors.firstName && __jsx(\"li\", null, \" \", errors.firstName.message, \" \"), errors.lastName && __jsx(\"li\", null, \" \", errors.lastName.message, \" \"), errors.email && __jsx(\"li\", null, \" \", errors.email.message), errors.phoneNumber && __jsx(\"li\", null, \" \", errors.phoneNumber.message, \" \"))), __jsx(\"form\", {\n    className: \"pure-form pure-form-stacked\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"fieldset\", null, __jsx(\"div\", {\n    className: \"pure-control-group\"\n  }, __jsx(\"label\", {\n    htmlFor: \"selectedFile\"\n  }, \"Select file\"), __jsx(\"input\", {\n    name: \"selectedFile\",\n    required: true,\n    type: \"file\",\n    id: \"selectedFile\",\n    placeholder: \"choose report file (csv)\",\n    ref: register\n  })), __jsx(\"br\", null), __jsx(\"div\", {\n    className: \"pure-controls\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"pure-button button-secondary\"\n  }, \"Submit\"))))));\n};\n\nconst mapStateToProps = state => ({\n  addUserError: state.users.addUserError,\n  lastAdded: state.users.lastAdded,\n  selectedUser: state.users.selectedUser\n});\n\nconst mapDispatchToProps = {\n  addUser: userActions.addUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadReportModal);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/components/uploadReportModal.js"],"names":["Link","userActions","connect","useForm","pattern","errorMessage","UploadReportModal","children","pageProps","addUserError","addUser","selectedUser","lastAdded","register","handleSubmit","reset","errors","parseCsv","data","parsedata","newLinebrk","split","i","length","push","header","records","slice","console","log","JSON","stringify","onSubmit","formData","fileReader","FileReader","file","selectedFile","parsedCsv","addEventListener","e","target","result","readAsBinaryString","firstName","lastName","Object","keys","error","message","email","phoneNumber","mapStateToProps","state","users","mapDispatchToProps"],"mappings":"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","sourcesContent":["import Link from \"next/link\";\nimport { userActions } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { pattern, errorMessage } from '../constants';\n\nconst UploadReportModal = ({children, pageProps,addUserError, addUser,selectedUser, lastAdded}) => {\n    const {register, handleSubmit,reset, errors} = useForm();\n    const parseCsv = (data) => {\n        \n        let parsedata = [];\n\n        let newLinebrk = data.split(\"\\n\");\n\n        for(let i = 0; i < newLinebrk.length; i++) {\n\n            parsedata.push(newLinebrk[i].split(\",\"))\n            \n        }\n\n        const header = parsedata[0]\n        const records = parsedata.slice()\n        console.log(JSON.stringify(parsedata.slice(-1)))\n\n        return parsedata\n    }\n    const onSubmit = formData => {\n        const fileReader = new FileReader();\n        const file = formData.selectedFile[0]\n        let parsedCsv = null\n\n        fileReader.addEventListener(\"load\",(e) => {\n            parsedCsv = parseCsv(e.target.result)\n            console.log(parsedCsv)\n        })\n\n        fileReader.readAsBinaryString(file)\n        \n        //console.log(parsedCsv)\n        //addUser(formData);\n\n        \n        // if (!addUserError){\n        //     reset()\n            \n        // }\n            \n\n    }\n    return <div id=\"uploadReportModal\" className=\"modal\">\n         \n        <div className=\"modal-content\">\n            <span className=\"close\" data-type=\"hide-modal\" data-target=\"uploadReportModal\">&times;</span>\n            {selectedUser && <h3>Upload a report for <span className=\"blue\">{selectedUser.firstName + \" \" + selectedUser.lastName}</span></h3> }\n            <hr className=\"divider\"/>\n            {lastAdded && !addUserError && (Object.keys(errors).length == 0) && <div className=\"panel code\">\n            <h4 className=\"success\"> LAST RECORD: {lastAdded.firstName + \" \" + lastAdded.lastName}</h4>\n                </div>\n            }\n            { addUserError && <div className=\"panel code error-msg\">\n                  <ul>\n                    <li> {error}</li>    \n                  </ul>\n                   \n                </div>\n\n            }\n            { Object.keys(errors).length != 0 && \n                <div className=\"panel code error-msg\">\n                  <ul>\n                    \n                    {errors.firstName && <li> {errors.firstName.message} </li> }\n                    {errors.lastName && <li> {errors.lastName.message} </li> }\n    \n                    {errors.email && <li> {errors.email.message}</li> }\n                    {errors.phoneNumber && <li> {errors.phoneNumber.message} </li> }\n                    \n                  </ul>\n                   \n                </div>\n            }\n            \n            <form className=\"pure-form pure-form-stacked\" onSubmit={handleSubmit(onSubmit)}>\n              <fieldset>\n                  <div className=\"pure-control-group\">\n                      <label htmlFor=\"selectedFile\">Select file</label>\n                      <input name=\"selectedFile\" required={true} type=\"file\" id=\"selectedFile\" placeholder=\"choose report file (csv)\" ref={register} />\n                  </div>\n                  <br/>\n                  \n                  <div className=\"pure-controls\">\n                      <button type=\"submit\" className=\"pure-button button-secondary\">Submit</button>\n                  </div>\n                </fieldset>\n              </form>\n          \n            \n        </div>\n    </div>\n}\n\n\nconst mapStateToProps = state => ({\n    addUserError: state.users.addUserError,\n    lastAdded: state.users.lastAdded,\n    selectedUser: state.users.selectedUser\n  });\n\nconst mapDispatchToProps = {\n    addUser: userActions.addUser\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(UploadReportModal) \n"]},"metadata":{},"sourceType":"module"}