{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { routeConstants, userConstants } from \"../constants\";\n\nvar UserService = /*#__PURE__*/function () {\n  function UserService() {\n    _classCallCheck(this, UserService);\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  _createClass(UserService, [{\n    key: \"addUser\",\n    value: function addUser(data, token) {\n      return this.fetch(routeConstants.ADD_USER, {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }, token).then(function (res) {\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(data, token) {\n      return this.fetch(routeConstants.UPDATE_USER, {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }, token).then(function (res) {\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"getUserReport\",\n    value: function getUserReport(data, token) {\n      return this.fetch(routeConstants.GET_USER_REPORT, {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }, token).then(function (res) {\n        //console.log(JSON.stringify(res))\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"uploadReport\",\n    value: function uploadReport(data, token) {\n      return this.fetch(routeConstants.UPLOAD_REPORT, {\n        method: 'POST',\n        body: JSON.stringify(data)\n      }, token).then(function (res) {\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"getAllUser\",\n    value: function getAllUser(token) {\n      return this.fetch(routeConstants.ALL_USER, {\n        method: 'GET'\n      }, token).then(function (res) {\n        //console.log(JSON.stringify(res))\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"_checkStatus\",\n    value: function () {\n      var _checkStatus2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var resp, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(response.status >= 200 && response.status < 300)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", response);\n\n              case 4:\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                resp = _context.sent;\n                //var error = new Error(response.statusText)\n                error = new Error(resp.message); //error.response = resp\n                //error\n\n                console.log(JSON.stringify(error));\n                throw error;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function _checkStatus(_x3) {\n        return _checkStatus2.apply(this, arguments);\n      }\n\n      return _checkStatus;\n    }()\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      var token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }; // if (this.loggedIn()) {\n      //     headers['Authorization'] = 'Bearer ' + this.getToken()\n      // }\n\n      if (token) {\n        headers['Authorization'] = 'Bearer ' + token;\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }]);\n\n  return UserService;\n}();\n\nexport { UserService as default };","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/services/UserService.js"],"names":["routeConstants","userConstants","UserService","fetch","bind","data","token","ADD_USER","method","body","JSON","stringify","then","res","Promise","resolve","UPDATE_USER","GET_USER_REPORT","UPLOAD_REPORT","ALL_USER","response","status","json","resp","error","Error","message","console","log","url","options","headers","_checkStatus"],"mappings":"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","sourcesContent":["import {routeConstants, userConstants } from \"../constants\";\n\nexport default class UserService {\n    constructor() {\n        this.fetch = this.fetch.bind(this)\n    }\n\n    addUser(data, token) {\n        return this.fetch(routeConstants.ADD_USER, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        },\n        token\n        ).then(res => {\n            return Promise.resolve(res)\n        })\n    }\n\n    updateUser(data, token) {\n        return this.fetch(routeConstants.UPDATE_USER, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        },\n        token\n        ).then(res => {\n            return Promise.resolve(res)\n        })\n    }\n\n    getUserReport(data, token) {\n        return this.fetch(routeConstants.GET_USER_REPORT, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        },\n        token\n        ).then(res => {\n            //console.log(JSON.stringify(res))\n            return Promise.resolve(res)\n        })\n    }\n\n    uploadReport(data, token) {\n        return this.fetch(routeConstants.UPLOAD_REPORT, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        },\n        token\n        ).then(res => {\n            return Promise.resolve(res)\n        })\n    }\n\n\n    getAllUser(token) {\n        return this.fetch(routeConstants.ALL_USER, {\n            method: 'GET',\n        },\n        token\n        ).then(res => {\n            //console.log(JSON.stringify(res))\n            return Promise.resolve(res)\n        })\n    }\n\n\n    async _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n\n            const resp = await response.json()\n            //var error = new Error(response.statusText)\n            var error = new Error(resp.message)\n            //error.response = resp\n            //error\n            console.log(JSON.stringify(error))\n            throw error\n        }\n    }\n\n    fetch(url, options, token=null) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        // if (this.loggedIn()) {\n        //     headers['Authorization'] = 'Bearer ' + this.getToken()\n        // }\n\n        if (token) {\n                headers['Authorization'] = 'Bearer ' + token\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}