{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"../styles/pure/pure-min.css\";\nimport \"../styles/pure/grids-responsive-min.css\";\nimport \"../styles/pure/main-grid.css\";\nimport \"../styles/pure/main.css\";\nimport \"../styles/globals.css\";\nimport { encrypt, decrypt } from \"../utils/crypt\";\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, { Container } from 'next/app';\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\";\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\";\nimport { getPageList } from \"../utils/helpers\";\nimport Cookies from \"universal-cookie\";\nimport { useRouter } from \"next/router\";\n\nfunction MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      reduxStore = _ref.reduxStore,\n      persistor = _ref.persistor;\n  var Layout = Component.Layout || AdminLayout;\n  var router = useRouter();\n  return __jsx(React.Fragment, null, __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, __jsx(Layout, pageProps, __jsx(Component, pageProps)))), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/menu.js\"\n  }), __jsx(\"script\", {\n    type: \"text/javascript\",\n    src: \"/js/grid.js\"\n  }), __jsx(\"script\", {\n    defer: true,\n    type: \"text/javascript\",\n    src: \"/js/ui.js\"\n  }));\n}\n\n_s(MyApp, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = MyApp;\n\nMyApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(appContext) {\n    var appProps, encrytedToken, token, user, _result$data, _result$data2, headers, response, result, pathname, payload, currentPath;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return App.getInitialProps(appContext);\n\n          case 2:\n            appProps = _context.sent;\n            user = null;\n\n            if (appContext.ctx.req && appContext.ctx.req.headers.cookie) {\n              encrytedToken = new Cookies(appContext.ctx.req.headers.cookie).get(\"atk\");\n              token = decrypt(encrytedToken);\n            }\n\n            if (!token) {\n              _context.next = 16;\n              break;\n            }\n\n            // make request to server for a refresh token\n            headers = {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            };\n            headers['Authorization'] = 'Bearer ' + token;\n            _context.next = 10;\n            return fetch(routeConstants.REFRESH_TOKEN, {\n              method: \"POST\",\n              headers: headers\n            }, []);\n\n          case 10:\n            response = _context.sent;\n            _context.next = 13;\n            return response.json();\n\n          case 13:\n            result = _context.sent;\n            user = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.user;\n            token = (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : _result$data2.token;\n\n          case 16:\n            pathname = appContext.router.pathname;\n\n            if (user && user != undefined) {\n              payload = {\n                user: user,\n                token: token\n              };\n              appContext.ctx.reduxStore.dispatch({\n                type: userConstants.LOGIN_SUCCESS,\n                payload: payload\n              });\n              currentPath = appContext.ctx.req.path; // check that we are in SSR mode (NOT static and NOT client-side)\n\n              if (false && appContext.ctx.res.writeHead) {\n                // if path is / or login and we already have accessToken then change to /home\n                if (pathname === '/login' || pathname === '/' || pathname === '/index') {\n                  pathname = '/home';\n                } //route to the path, when it has changed\n\n\n                if (pathname !== currentPath) {\n                  appContext.ctx.res.writeHead(302, {\n                    Location: pathname\n                  });\n                  appContext.ctx.res.end();\n                }\n              } else {\n                router.replace(pathname);\n              }\n            } else {\n              if (false && appContext.ctx.res.writeHead) {\n                if (pathname !== \"/\") {\n                  appContext.ctx.res.writeHead(302, {\n                    Location: \"/\"\n                  });\n                  appContext.ctx.res.end();\n                }\n              } else {\n                router.replace(\"/\");\n              }\n            }\n\n            return _context.abrupt(\"return\", _objectSpread({}, appProps));\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withReduxStore(MyApp);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/_app.js"],"names":["encrypt","decrypt","AdminLayout","Provider","PersistGate","withReduxStore","App","Container","userConstants","routeConstants","userActions","fetch","route","getPageList","Cookies","useRouter","MyApp","Component","pageProps","reduxStore","persistor","Layout","router","getInitialProps","appContext","appProps","user","ctx","req","headers","cookie","encrytedToken","get","token","REFRESH_TOKEN","method","response","json","result","data","pathname","undefined","payload","dispatch","type","LOGIN_SUCCESS","currentPath","path","res","writeHead","Location","end","replace"],"mappings":"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","sourcesContent":["\nimport \"../styles/pure/pure-min.css\"\nimport \"../styles/pure/grids-responsive-min.css\"\nimport \"../styles/pure/main-grid.css\"\nimport \"../styles/pure/main.css\"\n\nimport \"../styles/globals.css\"\n\nimport {encrypt, decrypt} from \"../utils/crypt\";\n\n\n\nimport AdminLayout from \"../components/layouts/adminLayout\";\nimport { Provider } from \"react-redux\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport withReduxStore from \"../lib/with-redux-store\";\nimport App, {Container} from 'next/app'\nimport { userConstants, routeConstants } from '../constants';\nimport { userActions } from \"../actions\"\nimport fetch from \"isomorphic-unfetch\";\nimport { route } from \"next/dist/next-server/server/router\"\nimport { getPageList } from \"../utils/helpers\"\n\nimport Cookies from \"universal-cookie\";\nimport { useRouter } from \"next/router\";\n\nfunction MyApp({ Component, pageProps, reduxStore, persistor }) {\n  const Layout = Component.Layout || AdminLayout;\n  const router  = useRouter();\n \n  return (\n    <>\n    <Provider store={reduxStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Layout {...pageProps}>\n          <Component {...pageProps} />\n        </Layout>\n      </PersistGate>\n    </Provider>\n      \n      <script type=\"text/javascript\" src=\"/js/menu.js\" />\n      <script type=\"text/javascript\" src=\"/js/grid.js\" />\n      <script defer type=\"text/javascript\" src=\"/js/ui.js\" />\n    </>\n  )\n}\n\nMyApp.getInitialProps = async (appContext) => {\n\n  \n    \n\n    const appProps = await App.getInitialProps(appContext);\n    \n    let encrytedToken, token, user = null\n    if(appContext.ctx.req && appContext.ctx.req.headers.cookie) {\n      encrytedToken = new Cookies(appContext.ctx.req.headers.cookie).get(\"atk\")\n      token = decrypt(encrytedToken)\n    }\n\n    \n\n    if (token){\n\n      // make request to server for a refresh token\n      const headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n        }\n  \n      headers['Authorization'] = 'Bearer ' + token\n  \n      \n      const response = await fetch(routeConstants.REFRESH_TOKEN,{\n        method:\"POST\",\n        headers\n      },[])\n  \n      const result = await response.json()\n      user = result.data?.user;\n      token = result.data?.token\n    }\n    \n\n    let pathname = appContext.router.pathname\n    \n  \n    \n    \n    if (user && user != undefined){\n      \n      const payload = {user, token}\n      appContext.ctx.reduxStore.dispatch({type:userConstants.LOGIN_SUCCESS, payload})\n      \n      const currentPath = appContext.ctx.req.path\n      \n\n      // check that we are in SSR mode (NOT static and NOT client-side)\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        \n        \n        // if path is / or login and we already have accessToken then change to /home\n        if (pathname === '/login' || pathname === '/' || pathname === '/index') {\n          pathname = '/home'  \n        }\n\n        //route to the path, when it has changed\n        \n        if(pathname !== currentPath){\n          appContext.ctx.res.writeHead(302, { Location: pathname });\n          appContext.ctx.res.end();\n        }\n        \n        \n      }else {\n        router.replace(pathname)\n      }\n    } else {\n\n      if (typeof window === \"undefined\" && appContext.ctx.res.writeHead) {\n        if(pathname !== \"/\"){\n          appContext.ctx.res.writeHead(302, { Location: \"/\" });\n          appContext.ctx.res.end();\n        }\n      }else {\n        router.replace(\"/\")\n      }\n    }\n\n\n    return { ...appProps};\n}\n\nexport default withReduxStore(MyApp)\n"]},"metadata":{},"sourceType":"module"}