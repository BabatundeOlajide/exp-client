{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { userConstants } from '../constants';\nexport function users(state = {}, action) {\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addingUser: true,\n        addUserError: [action.user, ...state.filteredUsers],\n        lastAdded: action.user\n      });\n\n    case userConstants.REGISTER_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allUsers: [...state.allUsers, action.user],\n        filteredUsers: [action.user, ...state.filteredUsers],\n        lastAdded: action.user\n      });\n\n    case userConstants.GETALL_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case userConstants.GETALL_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allUsers: action.users,\n        filteredUsers: action.users,\n        loading: false,\n        loadingError: false\n      });\n\n    case userConstants.GETALL_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        loadingError: true,\n        error: action.error\n      });\n\n    case userConstants.UPDATE_USER_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updateUserSuccess: false,\n        updateUserError: \"\"\n      });\n\n    case userConstants.UPDATE_USER_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updateUserSuccess: true,\n        updateUserError: \"\",\n        lastUpdated: state.selectedUser\n      });\n\n    case userConstants.UPDATE_USER_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        updateUserSuccess: false,\n        updateUserError: true,\n        error: action.error\n      });\n\n    case userConstants.SELECT_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedUser: state.allUsers.find(user => user.id === action.userId)\n      });\n\n    case userConstants.FILTERED_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filteredUsers: action.users\n      });\n\n    case userConstants.RESET_FILTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filteredUsers: action.users\n      });\n\n    case userConstants.USER_REPORT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reportRequestSuccess: false,\n        reportRequestError: \"\"\n      });\n\n    case userConstants.USER_REPORT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reportRequestSuccess: true,\n        reportRequestError: \"\",\n        selectedReport: action.report\n      });\n\n    case userConstants.USER_REPORT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reportRequestSuccess: false,\n        reportRequestError: action.error,\n        selectedReport: null\n      });\n\n    case userConstants.UPDATE_USER_IN_STORE:\n      let currentUser = state.selectedUser;\n      if (currentUser.id === action.user.id) currentUser = action.user;\n      const filteredUsers = state.filteredUsers;\n      const allUsers = state.allUsers;\n      let index = filteredUsers.findIndex(x => x.id == currentUser.id);\n      if (index != -1) filteredUsers[index] = action.user;\n      index = allUsers.findIndex(x => x.id == currentUser.id);\n      if (index != -1) allUsers[index] = action.user;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedUser: currentUser,\n        filteredUsers: filteredUsers,\n        allUsers: allUsers\n      });\n\n    case userConstants.REPORT_UPLOAD_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        uploadReportSuccess: false,\n        uploadReportError: \"\"\n      });\n\n    case userConstants.REPORT_UPLOAD_SUCCESS:\n      let curUser = state.selectedUser;\n      if (curUser.id === action.data.user.id) curUser = action.data.user; //console.log(curUser)\n\n      const ftdUsers = state.filteredUsers;\n      const all = state.allUsers;\n      let ind = ftdUsers.findIndex(x => x.id == curUser.id);\n      if (ind != -1) ftdUsers[ind] = action.data.user;\n      ind = all.findIndex(x => x.id == curUser.id);\n      if (ind != -1) all[ind] = action.data.user;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedUser: curUser,\n        selectedReport: action.data.report,\n        filteredUsers: ftdUsers,\n        allUsers: all,\n        uploadReportSuccess: true,\n        uploadReportError: \"\"\n      });\n\n    case userConstants.REPORT_UPLOAD_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        uploadReportSuccess: false,\n        uploadReportError: action.error\n      });\n\n    case userConstants.DELETE_REQUEST:\n      // add 'deleting:true' property to user being deleted\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allUsers: state.allUsers.map(user => user.id === action.id ? _objectSpread(_objectSpread({}, user), {}, {\n          deleting: true\n        }) : user)\n      });\n\n    case userConstants.DELETE_SUCCESS:\n      // remove deleted user from state\n      return {\n        allUsers: state.allUsers.filter(user => user.id !== action.id)\n      };\n\n    case userConstants.DELETE_FAILURE:\n      // remove 'deleting:true' property and add 'deleteError:[error]' property to user \n      return _objectSpread(_objectSpread({}, state), {}, {\n        allUsers: state.allUsers.map(user => {\n          if (user.id === action.id) {\n            // make copy of user without 'deleting:true' property\n            const {\n              deleting\n            } = user,\n                  userCopy = _objectWithoutProperties(user, [\"deleting\"]); // return copy of user with 'deleteError:[error]' property\n\n\n            return _objectSpread(_objectSpread({}, userCopy), {}, {\n              deleteError: action.error\n            });\n          }\n\n          return user;\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/reducers/users.reducer.js"],"names":["userConstants","users","state","action","type","REGISTER_REQUEST","addingUser","addUserError","user","filteredUsers","lastAdded","REGISTER_SUCCESS","allUsers","GETALL_REQUEST","loading","GETALL_SUCCESS","loadingError","GETALL_FAILURE","error","UPDATE_USER_REQUEST","updateUserSuccess","updateUserError","UPDATE_USER_SUCCESS","lastUpdated","selectedUser","UPDATE_USER_FAILURE","SELECT_USER","find","id","userId","FILTERED_USER","RESET_FILTER","USER_REPORT_REQUEST","reportRequestSuccess","reportRequestError","USER_REPORT_SUCCESS","selectedReport","report","USER_REPORT_FAILURE","UPDATE_USER_IN_STORE","currentUser","index","findIndex","x","REPORT_UPLOAD_REQUEST","uploadReportSuccess","uploadReportError","REPORT_UPLOAD_SUCCESS","curUser","data","ftdUsers","all","ind","REPORT_UPLOAD_FAILURE","DELETE_REQUEST","map","deleting","DELETE_SUCCESS","filter","DELETE_FAILURE","userCopy","deleteError"],"mappings":"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","sourcesContent":["import { userConstants } from '../constants';\n\nexport function users(state = {}, action) {\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return {\n        ...state,\n        addingUser: true,\n        addUserError: [action.user, ...state.filteredUsers ],\n        lastAdded: action.user\n      };\n    case userConstants.REGISTER_SUCCESS:\n      return {\n        ...state,\n        allUsers: [...state.allUsers, action.user],\n        filteredUsers: [action.user, ...state.filteredUsers ],\n        lastAdded: action.user\n      };\n\n    case userConstants.GETALL_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    \n    case userConstants.GETALL_SUCCESS:\n      return {\n        ...state,\n        allUsers: action.users,\n        filteredUsers: action.users,\n        loading: false,\n        loadingError:false,\n      };\n    case userConstants.GETALL_FAILURE:\n      return { \n        ...state,\n        loading:false,\n        loadingError:true,\n        error: action.error\n      };\n    case userConstants.UPDATE_USER_REQUEST:\n      return {\n        ...state,\n        updateUserSuccess:false,\n        updateUserError:\"\",\n        \n      };\n    case userConstants.UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        updateUserSuccess:true,\n        updateUserError:\"\",\n        lastUpdated: state.selectedUser\n        \n      };\n    case userConstants.UPDATE_USER_FAILURE:\n      return {\n        ...state,\n        updateUserSuccess:false,\n        updateUserError:true,\n        error:action.error\n      \n      };\n    case userConstants.SELECT_USER:\n      return {\n        ...state,\n        selectedUser: state.allUsers.find(user => user.id === action.userId)\n      };\n    case userConstants.FILTERED_USER:\n      return {\n        ...state,\n        filteredUsers: action.users\n      };\n    case userConstants.RESET_FILTER:\n      return {\n        ...state,\n        filteredUsers: action.users\n      };\n    case userConstants.USER_REPORT_REQUEST:\n      return {\n        ...state,\n        reportRequestSuccess:false,\n        reportRequestError:\"\"\n      };\n    case userConstants.USER_REPORT_SUCCESS:\n      return {\n        ...state,\n        reportRequestSuccess:true,\n        reportRequestError:\"\",\n        selectedReport: action.report\n      };\n    case userConstants.USER_REPORT_FAILURE:\n      return {\n        ...state,\n        reportRequestSuccess:false,\n        reportRequestError:action.error,\n        selectedReport: null\n      };\n\n    case userConstants.UPDATE_USER_IN_STORE:\n      let currentUser = state.selectedUser\n\n      if(currentUser.id === action.user.id)\n        currentUser = action.user\n\n      const filteredUsers = state.filteredUsers\n      const allUsers = state.allUsers\n\n      let index = filteredUsers.findIndex(x => x.id == currentUser.id)\n      if (index != -1)\n        filteredUsers[index] = action.user\n      \n      index = allUsers.findIndex(x => x.id == currentUser.id)\n      if (index != -1)\n        allUsers[index] = action.user\n      \n      return {\n        ...state,\n        selectedUser: currentUser,\n        filteredUsers: filteredUsers,\n        allUsers: allUsers\n      };\n\n    case userConstants.REPORT_UPLOAD_REQUEST:\n      return {\n        ...state,\n        uploadReportSuccess: false,\n        uploadReportError: \"\",\n      }\n    case userConstants.REPORT_UPLOAD_SUCCESS:\n\n      let curUser = state.selectedUser\n\n      if(curUser.id === action.data.user.id)\n        curUser = action.data.user\n      //console.log(curUser)\n\n      const ftdUsers = state.filteredUsers\n      const all = state.allUsers\n\n      let ind = ftdUsers.findIndex(x => x.id == curUser.id)\n      if (ind != -1)\n        ftdUsers[ind] = action.data.user\n      \n      ind = all.findIndex(x => x.id == curUser.id)\n      if (ind != -1)\n        all[ind] = action.data.user\n\n      return {\n        ...state,\n        selectedUser: curUser,\n        selectedReport:action.data.report,\n        filteredUsers: ftdUsers,\n        allUsers: all,\n        uploadReportSuccess: true,\n        uploadReportError: \"\",\n      }\n    case userConstants.REPORT_UPLOAD_FAILURE:\n      return {\n        ...state,\n        uploadReportSuccess: false,\n        uploadReportError: action.error,\n      }\n    case userConstants.DELETE_REQUEST:\n      // add 'deleting:true' property to user being deleted\n      return {\n        ...state,\n        allUsers: state.allUsers.map(user =>\n          user.id === action.id\n            ? { ...user, deleting: true }\n            : user\n        )\n      };\n    case userConstants.DELETE_SUCCESS:\n      // remove deleted user from state\n      return {\n        allUsers: state.allUsers.filter(user => user.id !== action.id)\n      };\n    case userConstants.DELETE_FAILURE:\n      // remove 'deleting:true' property and add 'deleteError:[error]' property to user \n      return {\n        ...state,\n        allUsers: state.allUsers.map(user => {\n          if (user.id === action.id) {\n            // make copy of user without 'deleting:true' property\n            const { deleting, ...userCopy } = user;\n            // return copy of user with 'deleteError:[error]' property\n            return { ...userCopy, deleteError: action.error };\n          }\n\n          return user;\n        })\n      };\n    default:\n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}