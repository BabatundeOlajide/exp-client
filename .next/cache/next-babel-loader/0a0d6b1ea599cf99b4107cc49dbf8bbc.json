{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { routeConstants, userConstants } from \"../constants\";\nimport { useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nimport Cookies from \"universal-cookie\";\nimport Cryptr from \"cryptr\";\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.cookie = new Cookies();\n    this.cryptr = new Cryptr(process.env.ACCESS_TOKEN_ENC_KEY || \"ty#eyrbdy8937b@Ja\");\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(email, password) {\n      var _this = this;\n\n      // Get a token\n      return this.fetch(routeConstants.ADMIN_LOGIN, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      }).then(function (res) {\n        _this.setToken(res); // return this.fetch(`${this.domain}/api/user`, {\n        //     method: 'GET'\n        // })\n\n\n        return Promise.resolve(res);\n      }) // .then(res => {\n      //     this.setProfile(res)\n      //     return Promise.resolve(res)\n      // })\n      [\"catch\"](function (error) {\n        console.log(error);\n        return Promise.resolve(error);\n      });\n    }\n  }, {\n    key: \"loginAdmin\",\n    value: function loginAdmin(email, password) {\n      var _this2 = this;\n\n      // Get a token\n      return this.fetch(routeConstants.ADMIN_LOGIN, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      }).then(function (res) {\n        _this2.setToken(res.accessToken);\n\n        return _this2.fetch(routeConstants.ADMIN_PROFILE, {\n          method: 'GET'\n        });\n      }).then(function (res) {\n        _this2.setProfile(res.profile);\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // return !!token && !isTokenExpired(token) // handwaiving here\n\n      return !!token; // handwaiving here\n    }\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(profile) {\n      // Saves profile data to redux store\n      console.log(\"profile is \".concat(profile));\n      dispatch({\n        type: userConstants.USER_PROFILE,\n        profile: profile\n      });\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {// Retrieves the profile data from redux state\n      //return useSelector(state => state.authentication?.profile)\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(accessToken) {\n      var encryptedToken = this.cryptr.encrypt(accessToken);\n      console.log('At setToken, token = ' + encryptedToken);\n      this.cookie.set('atk', encryptedToken, {\n        httpOnly: true\n      });\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var encyptedToken = this.cookie.get('atk');\n\n      if (!encyptedToken) {\n        return \"\";\n      }\n\n      var accessToken = this.cryptr.decrypt(encyptedToken);\n      console.log('At getToken, token = ' + accessToken);\n      return accessToken;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('profile');\n    }\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        console.log(error.response.json);\n        throw error;\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/services/AuthService.js"],"names":["routeConstants","userConstants","useSelector","useDispatch","useStore","App","store","Cookies","Cryptr","AuthService","fetch","bind","login","getProfile","cookie","cryptr","process","env","ACCESS_TOKEN_ENC_KEY","email","password","ADMIN_LOGIN","method","body","JSON","stringify","then","res","setToken","Promise","resolve","error","console","log","accessToken","ADMIN_PROFILE","setProfile","profile","token","getToken","dispatch","type","USER_PROFILE","encryptedToken","encrypt","set","httpOnly","encyptedToken","get","decrypt","localStorage","removeItem","response","status","Error","statusText","json","url","options","headers","loggedIn","_checkStatus"],"mappings":";;;;;;;;AAAA,SAAQA,cAAR,EAAwBC,aAAxB,QAA6C,cAA7C;AACA,SAAUC,WAAV,EAAuBC,WAAvB,EAAoCC,QAApC,QAAoD,aAApD;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;IACqBC,W;AACjB,yBAAc;AAAA;;AACV,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,MAAL,GAAc,IAAIP,OAAJ,EAAd;AACA,SAAKQ,MAAL,GAAc,IAAIP,MAAJ,CAAWQ,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,mBAA/C,CAAd;AAEH;;;;0BAEKC,K,EAAOC,Q,EAAU;AAAA;;AACnB;AACA,aAAO,KAAKV,KAAL,CAAWV,cAAc,CAACqB,WAA1B,EAAuC;AAC1CC,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBN,UAAAA,KAAK,EAALA,KADiB;AAEjBC,UAAAA,QAAQ,EAARA;AAFiB,SAAf;AAFoC,OAAvC,EAONM,IAPM,CAOD,UAAAC,GAAG,EAAI;AACT,QAAA,KAAI,CAACC,QAAL,CAAcD,GAAd,EADS,CAET;AACA;AACA;;;AACA,eAAOE,OAAO,CAACC,OAAR,CAAgBH,GAAhB,CAAP;AACH,OAbM,EAcP;AACA;AACA;AACA;AAjBO,gBAkBA,UAAAI,KAAK,EAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,eAAOF,OAAO,CAACC,OAAR,CAAgBC,KAAhB,CAAP;AACH,OArBM,CAAP;AAuBH;;;+BAEUZ,K,EAAOC,Q,EAAU;AAAA;;AACxB;AACA,aAAO,KAAKV,KAAL,CAAWV,cAAc,CAACqB,WAA1B,EAAuC;AAC1CC,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBN,UAAAA,KAAK,EAALA,KADiB;AAEjBC,UAAAA,QAAQ,EAARA;AAFiB,SAAf;AAFoC,OAAvC,EAMJM,IANI,CAMC,UAAAC,GAAG,EAAI;AACX,QAAA,MAAI,CAACC,QAAL,CAAcD,GAAG,CAACO,WAAlB;;AACA,eAAO,MAAI,CAACxB,KAAL,CAAWV,cAAc,CAACmC,aAA1B,EAAyC;AAC5Cb,UAAAA,MAAM,EAAE;AADoC,SAAzC,CAAP;AAGH,OAXM,EAWJI,IAXI,CAWC,UAAAC,GAAG,EAAI;AACX,QAAA,MAAI,CAACS,UAAL,CAAgBT,GAAG,CAACU,OAApB;;AACA,eAAOR,OAAO,CAACC,OAAR,CAAgBH,GAAhB,CAAP;AACH,OAdM,CAAP;AAeH;;;+BAEU;AACP;AACA,UAAMW,KAAK,GAAG,KAAKC,QAAL,EAAd,CAFO,CAGP;;AACA,aAAO,CAAC,CAACD,KAAT,CAJO,CAIQ;AAClB;;;+BAEUD,O,EAAS;AAChB;AACAL,MAAAA,OAAO,CAACC,GAAR,sBAA0BI,OAA1B;AACAG,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAExC,aAAa,CAACyC,YAArB;AAAmCL,QAAAA,OAAO,EAAPA;AAAnC,OAAD,CAAR;AACH;;;iCAEY,CACT;AACA;AACH;;;6BAEQH,W,EAAa;AAClB,UAAMS,cAAc,GAAG,KAAK5B,MAAL,CAAY6B,OAAZ,CAAoBV,WAApB,CAAvB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BU,cAAtC;AACA,WAAK7B,MAAL,CAAY+B,GAAZ,CAAgB,KAAhB,EAAuBF,cAAvB,EAAuC;AAACG,QAAAA,QAAQ,EAAC;AAAV,OAAvC;AACH;;;+BAEU;AAEP,UAAMC,aAAa,GAAG,KAAKjC,MAAL,CAAYkC,GAAZ,CAAgB,KAAhB,CAAtB;;AACA,UAAG,CAACD,aAAJ,EAAkB;AACd,eAAO,EAAP;AACH;;AAED,UAAMb,WAAW,GAAG,KAAKnB,MAAL,CAAYkC,OAAZ,CAAoBF,aAApB,CAApB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BC,WAAtC;AACA,aAAOA,WAAP;AACH;;;6BAEQ;AACL;AACAgB,MAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACH;;;iCAEYC,Q,EAAU;AACnB;AACA,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,eAAOD,QAAP;AACH,OAFD,MAEO;AACH,YAAIrB,KAAK,GAAG,IAAIuB,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAZ;AACAxB,QAAAA,KAAK,CAACqB,QAAN,GAAiBA,QAAjB;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACqB,QAAN,CAAeI,IAA3B;AACA,cAAMzB,KAAN;AACH;AACJ;;;;;;;;;;;;;gBAEK0B,G,EAAKC,O,EAAS;AAChB;AACA,UAAMC,OAAO,GAAG;AACZ,kBAAU,kBADE;AAEZ,wBAAgB;AAFJ,OAAhB;;AAKA,UAAI,KAAKC,QAAL,EAAJ,EAAqB;AACjBD,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAY,KAAKpB,QAAL,EAAvC;AACH;;AAED,aAAO7B,KAAK,CAAC+C,GAAD;AACJE,QAAAA,OAAO,EAAPA;AADI,SAEDD,OAFC,EAAL,CAIFhC,IAJE,CAIG,KAAKmC,YAJR,EAKFnC,IALE,CAKG,UAAA0B,QAAQ;AAAA,eAAIA,QAAQ,CAACI,IAAT,EAAJ;AAAA,OALX,CAAP;AAMH,K;;;;;;SA/HgB/C,W","sourcesContent":["import {routeConstants, userConstants } from \"../constants\";\nimport {  useSelector, useDispatch, useStore } from \"react-redux\";\nimport App from \"next/app\";\nimport store from \"../store\";\nimport Cookies from \"universal-cookie\";\nimport Cryptr from \"cryptr\";\nexport default class AuthService {\n    constructor() {\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n        this.cookie = new Cookies()\n        this.cryptr = new Cryptr(process.env.ACCESS_TOKEN_ENC_KEY || \"ty#eyrbdy8937b@Ja\")\n        \n    }\n\n    login(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        })\n        .then(res => {\n            this.setToken(res)\n            // return this.fetch(`${this.domain}/api/user`, {\n            //     method: 'GET'\n            // })\n            return Promise.resolve(res)\n        })\n        // .then(res => {\n        //     this.setProfile(res)\n        //     return Promise.resolve(res)\n        // })\n        .catch(error => {\n            console.log(error)\n            return Promise.resolve(error)\n        })\n        \n    }\n\n    loginAdmin(email, password) {\n        // Get a token\n        return this.fetch(routeConstants.ADMIN_LOGIN, {\n            method: 'POST',\n            body: JSON.stringify({\n                email,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.accessToken)\n            return this.fetch(routeConstants.ADMIN_PROFILE, {\n                method: 'GET'\n            })\n        }).then(res => {\n            this.setProfile(res.profile)\n            return Promise.resolve(res)\n        })\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        // return !!token && !isTokenExpired(token) // handwaiving here\n        return !!token // handwaiving here\n    }\n\n    setProfile(profile) {\n        // Saves profile data to redux store\n        console.log(`profile is ${profile}`)\n        dispatch({type: userConstants.USER_PROFILE, profile})\n    }\n\n    getProfile() {\n        // Retrieves the profile data from redux state\n        //return useSelector(state => state.authentication?.profile)\n    }\n\n    setToken(accessToken) {\n        const encryptedToken = this.cryptr.encrypt(accessToken)\n        console.log('At setToken, token = ' + encryptedToken)\n        this.cookie.set('atk', encryptedToken, {httpOnly:true})\n    }\n\n    getToken() {\n\n        const encyptedToken = this.cookie.get('atk')\n        if(!encyptedToken){\n            return \"\"\n        }\n\n        const accessToken = this.cryptr.decrypt(encyptedToken)\n        console.log('At getToken, token = ' + accessToken)\n        return accessToken\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        localStorage.removeItem('profile');\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            console.log(error.response.json)\n            throw error\n        }\n    }\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n                headers,\n                ...options\n            })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n}"]},"metadata":{},"sourceType":"module"}