{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Link from \"next/link\";\nimport { connect } from 'react-redux';\nimport styles from '../styles/Home.module.css';\nimport { userActions } from \"../actions\";\nimport { useEffect } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { pattern } from '../constants';\n\nconst ChangePasswordPage = ({\n  changePassword,\n  changingPassword,\n  changeError,\n  error,\n  success,\n  logout,\n  pageProps\n}) => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n\n  const onSubmit = formData => {\n    changePassword(formData.password);\n  };\n\n  const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/;\n  const patternErrorMessage = \"Password must be minimum of 8 characters, with Uppercase, Lowercase and Symbol.\";\n\n  const doLogout = e => {\n    logout();\n    e.preventDefault();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Admin | Change Password\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  })), __jsx(\"div\", {\n    className: \"content code\"\n  }, !success && __jsx(\"h2\", null, \"Change Password\"), changeError && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \" \", error))), Object.keys(errors).length != 0 && __jsx(\"div\", {\n    className: \"panel code error-msg\"\n  }, __jsx(\"ul\", null, errors.password && __jsx(\"li\", null, \" \", errors.password.message, \" \"), errors.repassword && __jsx(\"li\", null, \" \", errors.repassword.message, \" \"))), !success && __jsx(\"form\", {\n    className: \"pure-form pure-form-aligned\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"fieldset\", null, __jsx(\"div\", {\n    className: `pure-control-group ${errors.password && 'error-input'}`\n  }, __jsx(\"label\", {\n    htmlFor: \"password\"\n  }, \"New Password\"), __jsx(\"input\", {\n    className: ` ${errors.password && 'error'}`,\n    type: \"password\",\n    ref: register({\n      required: \"Password is required\",\n      pattern: {\n        value: passwordPattern,\n        message: patternErrorMessage\n      }\n    }),\n    name: \"password\",\n    id: \"password\",\n    placeholder: \"New Password\"\n  })), __jsx(\"div\", {\n    className: `pure-control-group ${errors.repassword && 'error-input'}`\n  }, __jsx(\"label\", {\n    htmlFor: \"repassword\"\n  }, \"Re-Password\"), __jsx(\"input\", {\n    className: ` ${errors.password && 'error'}`,\n    type: \"password\",\n    ref: register({\n      required: \"Re-Password is required\",\n      pattern: {\n        value: pattern.PASSWORD,\n        message: patternErrorMessage\n      },\n      validate: value => value === watch(\"password\") || \"Passwords don't match\"\n    }),\n    name: \"repassword\",\n    id: \"repassword\",\n    placeholder: \"Re-Password\"\n  })), __jsx(\"div\", {\n    className: \"pure-controls\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"pure-button button-secondary\"\n  }, \"Submit\")))), success && __jsx(React.Fragment, null, __jsx(\"h2\", {\n    className: \"success\"\n  }, \"Password changed!\"), __jsx(\"p\", null, \"you can click \", __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", {\n    onClick: doLogout\n  }, \"here to\")), \" relogin\"))));\n};\n\nconst mapStateToProps = state => ({\n  changeError: !state.authentication.passwordChangeSuccess && state.authentication.passwordChangeError,\n  error: state.authentication.passwordChangeError,\n  success: state.authentication.passwordChangeSuccess,\n  changingPassword: state.authentication.changingPassword\n});\n\nconst mapDispatchToProps = {\n  changePassword: userActions.changePassword,\n  logout: userActions.logout\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage);","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/pages/changePassword.js"],"names":["Head","Link","connect","styles","userActions","useEffect","useForm","useWatch","pattern","ChangePasswordPage","changePassword","changingPassword","changeError","error","success","logout","pageProps","register","handleSubmit","watch","errors","onSubmit","formData","password","passwordPattern","patternErrorMessage","doLogout","e","preventDefault","Object","keys","length","message","repassword","required","value","PASSWORD","validate","mapStateToProps","state","authentication","passwordChangeSuccess","passwordChangeError","mapDispatchToProps"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport Link from \"next/link\";\nimport { connect } from 'react-redux';\nimport styles from '../styles/Home.module.css'\nimport { userActions } from \"../actions\";\nimport { useEffect } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { pattern } from '../constants';\n\nconst ChangePasswordPage = ({changePassword,changingPassword, changeError ,error, success, logout, pageProps}) => {\n  const {register, handleSubmit, watch, errors} = useForm();\n  const onSubmit = formData => {\n    changePassword(formData.password);\n\n  }\n\n  const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/\n  const patternErrorMessage = \"Password must be minimum of 8 characters, with Uppercase, Lowercase and Symbol.\"\n  const doLogout = (e) => {\n    logout()\n    e.preventDefault()\n  }\n  return (\n    \n    <>\n      <Head>\n        <title>Admin | Change Password</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n        \n          <div  className=\"content code\">\n            {!success && <h2>Change Password</h2>}\n            { changeError && <div className=\"panel code error-msg\">\n                  <ul>\n                    <li> {error}</li>    \n                  </ul>\n                   \n                </div>\n\n            }\n            { Object.keys(errors).length != 0 && \n                <div className=\"panel code error-msg\">\n                  <ul>\n                    {errors.password && <li> {errors.password.message} </li> }\n                    {errors.repassword && <li> {errors.repassword.message} </li> }\n                    \n                  </ul>\n                   \n                </div>\n            }\n            \n            {!success && <form className=\"pure-form pure-form-aligned\" onSubmit={handleSubmit(onSubmit)}>\n            <fieldset>\n                \n                \n                \n                <div className={`pure-control-group ${errors.password && 'error-input'}`}>\n                    <label htmlFor=\"password\">New Password</label>\n                    <input className={` ${errors.password && 'error'}`} \n                    type=\"password\" ref={register({required:\"Password is required\", \n                      pattern:{\n                        value:passwordPattern,\n                        message:patternErrorMessage\n\n                      }\n                    })} \n                    name=\"password\" id=\"password\" placeholder=\"New Password\" />\n                </div>\n\n                <div className={`pure-control-group ${errors.repassword && 'error-input'}`}>\n                    <label htmlFor=\"repassword\">Re-Password</label>\n                    <input className={` ${errors.password && 'error'}`} \n                    type=\"password\" ref={register({required:\"Re-Password is required\", \n                      pattern:{\n                        value:pattern.PASSWORD,\n                        message:patternErrorMessage\n\n                      },\n                      validate: (value) => value === watch(\"password\") || \"Passwords don't match\"\n                    })} \n                    name=\"repassword\" id=\"repassword\" placeholder=\"Re-Password\" />\n                </div>\n                \n                <div className=\"pure-controls\">\n                    \n                    <button type=\"submit\" className=\"pure-button button-secondary\">Submit</button>\n                    \n                </div>\n            </fieldset>\n          </form>}\n          { success && <>\n              <h2 className=\"success\">Password changed!</h2>\n              <p>you can click <Link href=\"#\"><a onClick={doLogout} >here to</a></Link> relogin</p>\n              </>\n          }\n          </div>\n\n          \n        \n      \n\n    </>\n  )\n}\n\n\n\nconst mapStateToProps = state => ({\n  changeError: !state.authentication.passwordChangeSuccess && state.authentication.passwordChangeError,\n  error: state.authentication.passwordChangeError,\n  success: state.authentication.passwordChangeSuccess,\n  changingPassword: state.authentication.changingPassword,\n});\n\nconst mapDispatchToProps = {\n  changePassword: userActions.changePassword,\n  logout: userActions.logout\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage) "]},"metadata":{},"sourceType":"module"}