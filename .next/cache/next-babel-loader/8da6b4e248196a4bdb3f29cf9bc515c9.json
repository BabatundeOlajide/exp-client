{"ast":null,"code":"import { userConstants } from '../constants';\nimport AuthService from '../services/AuthService'; // import { alertActions } from './';\n\nimport Router from 'next/router';\nexport const userActions = {\n  cleanState,\n  login,\n  changePassword,\n  logout,\n  loggedIn,\n  register,\n  getAll,\n  delete: _delete\n};\nconst auth = new AuthService();\n\nfunction login(email, password) {\n  return (dispatch, getState) => {\n    dispatch(request({\n      email\n    }));\n    auth.loginAdmin(email, password).then(result => {\n      const payload = result.data;\n      dispatch(success(payload));\n      Router.replace('/home');\n    }, error => {\n      //console.log(error.toString())\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(payload) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      payload\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction changePassword(password) {\n  return (dispatch, getState) => {\n    var _getState$authenticat;\n\n    //dispatch(request({ email }));\n    const token = (_getState$authenticat = getState().authentication) === null || _getState$authenticat === void 0 ? void 0 : _getState$authenticat.token;\n    auth.changeAdminPassword({\n      password\n    }, token).then(result => {\n      dispatch(success());\n    }, error => {\n      //console.log(error.toString())\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.PASSWORD_CHANGE_REQUEST\n    };\n  }\n\n  function success() {\n    return {\n      type: userConstants.PASSWORD_CHANGE_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.PASSWORD_CHANGE_FAILURE,\n      error\n    };\n  }\n}\n\nfunction loggedIn() {\n  return dispatch => {\n    dispatch(request());\n    dispatch(success(auth.loggedIn()));\n  };\n\n  function request() {\n    return {\n      type: userConstants.TOKEN_REQUEST\n    };\n  }\n\n  function success(status) {\n    return {\n      type: userConstants.TOKEN_SUCCESS,\n      status\n    };\n  }\n} // function logout() {\n//     auth.logout();\n//     Router.replace('/');\n// }\n\n\nfunction logout() {\n  return dispatch => {\n    auth.logout(); //dispatch(success())\n\n    Router.replace('/login');\n  };\n\n  function success() {\n    return {\n      type: userConstants.LOGOUT\n    };\n  }\n}\n\nfunction cleanState() {\n  return dispatch => {\n    dispatch(success());\n  };\n\n  function success() {\n    return {\n      type: userConstants.LOGOUT\n    };\n  }\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    auth.register(user).then(user => {\n      dispatch(success());\n      Router.push('/login'); // dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error.toString())); // dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAll() {\n  return dispatch => {\n    dispatch(request());\n    auth.getAll().then(users => dispatch(success(users)), error => dispatch(failure(error.toString())));\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error\n    };\n  }\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n    auth.delete(id).then(user => dispatch(success(id)), error => dispatch(failure(id, error.toString())));\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/babatundeolajide/Projects/ExpressGrub/AdminClient/src/actions/user.actions.js"],"names":["userConstants","AuthService","Router","userActions","cleanState","login","changePassword","logout","loggedIn","register","getAll","delete","_delete","auth","email","password","dispatch","getState","request","loginAdmin","then","result","payload","data","success","replace","error","failure","toString","user","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","token","authentication","changeAdminPassword","PASSWORD_CHANGE_REQUEST","PASSWORD_CHANGE_SUCCESS","PASSWORD_CHANGE_FAILURE","TOKEN_REQUEST","status","TOKEN_SUCCESS","LOGOUT","push","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","users","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from '../constants';\nimport AuthService from '../services/AuthService';\n// import { alertActions } from './';\nimport Router from 'next/router';\n\nexport const userActions = {\n    cleanState,\n    login,\n    changePassword,\n    logout,\n    loggedIn,\n    register,\n    getAll,\n    delete: _delete\n};\n\nconst auth = new AuthService()\n\n\n\nfunction login(email, password) {\n    return (dispatch, getState) => {\n        dispatch(request({ email }));\n\n        auth.loginAdmin(email, password)\n            .then(\n                result => { \n                    const payload = result.data\n                    dispatch(success(payload));\n                    Router.replace('/home');\n                },\n                error => {\n                    //console.log(error.toString())\n                    dispatch(failure(error.toString()));\n                    \n                }\n            );\n    };\n\n    \n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(payload) { return { type: userConstants.LOGIN_SUCCESS, payload } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n\n\n\n\n\n\n\n\n\n\n}\n\nfunction changePassword(password) {\n    return (dispatch, getState) => {\n        //dispatch(request({ email }));\n        const token = getState().authentication?.token;\n        \n        auth.changeAdminPassword({password}, token)\n            .then(\n                result => { \n                    dispatch(success());\n                },\n                error => {\n                    //console.log(error.toString())\n                    dispatch(failure(error.toString()));\n                    \n                }\n            );\n    };\n\n    \n    function request() { return { type: userConstants.PASSWORD_CHANGE_REQUEST } }\n    function success() { return { type: userConstants.PASSWORD_CHANGE_SUCCESS } }\n    function failure(error) { return { type: userConstants.PASSWORD_CHANGE_FAILURE, error } }\n\n\n\n}\n\nfunction loggedIn() {\n    return dispatch => {\n        dispatch(request());\n        dispatch(success(auth.loggedIn()));\n    };\n    function request() { return { type: userConstants.TOKEN_REQUEST } }\n    function success(status) { return { type: userConstants.TOKEN_SUCCESS, status } }\n}\n\n\n\n// function logout() {\n\n//     auth.logout();\n    \n//     Router.replace('/');\n    \n    \n// }\n\nfunction logout() {\n    return dispatch => {\n\n        auth.logout()\n        //dispatch(success())\n\n        Router.replace('/login');\n           \n    };\n\n    function success() { return { type: userConstants.LOGOUT } }\n}\n\n\nfunction cleanState() {\n    return dispatch => {\n\n        dispatch(success())\n           \n    };\n\n    function success() { return { type: userConstants.LOGOUT } }\n}\n\nfunction register(user) {\n    return dispatch => {\n        dispatch(request(user));\n\n        auth.register(user)\n            .then(\n                user => { \n                    dispatch(success());\n                    Router.push('/login');\n                    // dispatch(alertActions.success('Registration successful'));\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    // dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAll() {\n    return dispatch => {\n        dispatch(request());\n\n        auth.getAll()\n            .then(\n                users => dispatch(success(users)),\n                error => dispatch(failure(error.toString()))\n            );\n    };\n\n    function request() { return { type: userConstants.GETALL_REQUEST } }\n    function success(users) { return { type: userConstants.GETALL_SUCCESS, users } }\n    function failure(error) { return { type: userConstants.GETALL_FAILURE, error } }\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    return dispatch => {\n        dispatch(request(id));\n\n        auth.delete(id)\n            .then(\n                user => dispatch(success(id)),\n                error => dispatch(failure(id, error.toString()))\n            );\n    };\n\n    function request(id) { return { type: userConstants.DELETE_REQUEST, id } }\n    function success(id) { return { type: userConstants.DELETE_SUCCESS, id } }\n    function failure(id, error) { return { type: userConstants.DELETE_FAILURE, id, error } }\n}"]},"metadata":{},"sourceType":"module"}